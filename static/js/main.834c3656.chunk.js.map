{"version":3,"sources":["Components/CopyToClipboard.js","Components/CopyScriptButton.js","util.js","Components/SimpleTextField.js","Components/ContainerToggle.js","Components/SimpleSelect.js","Containers/BackIronInputs.js","Containers/HalbachInputs.js","Containers/MagnetInputs.js","Containers/RotorInputs.js","Components/SimpleRadio.js","Containers/AnalysisInputs.js","Containers/GeneralInputs.js","Containers/RectConductorInputs.js","Containers/CircleCondInputs.js","Containers/ConductorInputs.js","Containers/StatorInputs.js","Components/SimInputForm.js","femmSimScript.js","Components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["CopyToClipboard","children","React","useState","showTooltip","setShowTooltip","Tooltip","open","title","leaveDelay","onClose","copy","content","CopyScriptButton","outputText","Grid","container","spacing","justifyContent","item","xs","Typography","variant","Button","color","onClick","TextField","fullWidth","multiline","rows","value","unitTypes","magnetTypes","ironTypes","wireGauges","SimpleTextField","name","control","label","render","field","onChange","ContainerToggle","childrenShowFalse","showChildren","setShowChildren","FormLabel","component","FormControlLabel","Switch","SimpleSelect","options","Select","sx","minWidth","map","option","MenuItem","BackIronInputs","alignItems","HalbachInputs","MagnetInputs","RotorInputs","sm","SimpleRadio","RadioGroup","Radio","AnalysisInputs","Alert","severity","GeneralInputs","RectConductorInputs","CircleCondInputs","ConductorInputs","StatorInputs","SimInputForm","useForm","defaultValues","UNITS","NUM_ROTOR_POLE_PAIRS","MAGNET_GAP","MAGNET_LENGTH","MAGNET_WIDTH","MAGNET_HEIGHT","MAGNET_GRADE","HALBACH","HALBACH_LENGTH","HALBACH_WIDTH","HALBACH_HEIGHT","HALBACH_GRADE","BACK_IRON","BACK_IRON_HEIGHT","BACK_IRON_MATERIAL","AIR_GAP","STATOR","RECTANGLE_CONDUCTOR","CONDUCTOR_WIDTH","CONDUCTOR_HEIGHT","CONDUCTOR_DIAMETER","CONDUCTOR_MATERIAL","PEAK_CURRENT","ROTOR_TO_STATOR_GAP","NUM_PHASES","NUM_PHASE_TURNS","ANALYSIS","FILEPATH","FILENAME","formVals","watch","JSON","stringify","replace","formInputToLuaScript","lg","Footer","style","marginTop","pjson","version","IconButton","target","href","App","className","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","rel","document","getElementById"],"mappings":"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","file":"static/js/main.834c3656.chunk.js","sourcesContent":["import React from 'react'\nimport copy from 'clipboard-copy'\nimport Tooltip from '@mui/material/Tooltip'\n\nexport function CopyToClipboard({ children }) {\n  const [showTooltip, setShowTooltip] = React.useState(false)\n\n  function handleOnTooltipClose() {\n    setShowTooltip(false)\n  }\n\n  function onCopy(content) {\n    copy(content)\n    setShowTooltip(true)\n  }\n\n  return (\n    <Tooltip\n      open={showTooltip}\n      title={'Copied to clipboard!'}\n      leaveDelay={1500}\n      onClose={handleOnTooltipClose}\n    >\n      {children({ copy: onCopy })}\n    </Tooltip>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography, Button, TextField } from '@mui/material'\nimport { CopyToClipboard } from './CopyToClipboard'\n\nexport function CopyScriptButton({ outputText }) {\n  return (\n    <Grid container spacing={2} justifyContent=\"center\">\n      <Grid item xs={8}>\n        <Typography variant=\"h2\">Output</Typography>\n        <Typography>\n          Copy this LUA script and paste it in the LUA console in your FEMM\n          program.\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <CopyToClipboard>\n          {({ copy }) => (\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => copy(outputText)}\n            >\n              Click to Copy\n            </Button>\n          )}\n        </CopyToClipboard>\n      </Grid>\n      <Grid item xs={8}>\n        <TextField fullWidth multiline rows={20} value={outputText} />\n      </Grid>\n    </Grid>\n  )\n}\n","import { femmSimScript } from './femmSimScript'\n\nexport function formInputToLuaScript(formVals) {\n  const stringifiedVals = JSON.stringify(formVals, null, 2)\n  const sani = stringifiedVals.replace(/^{\\n?|\\n?}$/g, '')\n  const sani1 = sani.replace(/\"(.*)\": /g, '$1 = ')\n  const sani2 = sani1.replace(/,\\n/g, '\\n')\n  const complete = sani2 + femmSimScript\n\n  return complete\n}\n\n// export function detectOs() {\n//   var detectOS = ''\n\n//   if (navigator.appVersion.indexOf('Win') !== -1) {\n//     detectOS = 'windows'\n//   }\n\n//   if (navigator.appVersion.indexOf('Mac') !== -1) {\n//     detectOS = 'mac'\n//   }\n\n//   if (navigator.appVersion.indexOf('Linux') !== -1) {\n//     detectOS = 'linux'\n//   }\n// }\n\nexport const unitTypes = ['millimeters', 'inches']\nexport const magnetTypes = [\n  'N30',\n  'N33',\n  'N35',\n  'N38',\n  'N40',\n  'N42',\n  'N45',\n  'N48',\n  'N50',\n  'N52',\n  'N55'\n]\n\nexport const ironTypes = [\n  '1006 Steel',\n  '1010 Steel',\n  '1018 Steel',\n  '1020 Steel',\n  '1117 Steel'\n]\n\nexport const wireGauges = [\n  '10 AWG',\n  '12 AWG',\n  '14 AWG',\n  '16 AWG',\n  '18 AWG',\n  '20 AWG',\n  '22 AWG',\n  '24 AWG',\n  '26 AWG',\n  '28 AWG',\n  '30 AWG',\n  '32 AWG',\n  '34 AWG',\n  '36 AWG'\n]\n","import React from 'react'\nimport { TextField } from '@mui/material'\nimport { Controller } from 'react-hook-form'\n\nexport function SimpleTextField({ name, control, label }) {\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field: { onChange, value } }) => (\n        <TextField onChange={onChange} value={value} label={label} />\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport { Grid, FormControlLabel, Switch, FormLabel } from '@mui/material'\n\nexport function ContainerToggle({ label, children, childrenShowFalse = null }) {\n  const [showChildren, setShowChildren] = React.useState(false)\n\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <FormControlLabel\n          control={\n            <Switch\n              value={showChildren}\n              onChange={() => setShowChildren(!showChildren)}\n            />\n          }\n          label={!showChildren ? 'No' : 'Yes'}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        {showChildren ? children : childrenShowFalse}\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { MenuItem, Select, Typography } from '@mui/material'\nimport { Controller } from 'react-hook-form'\n\nexport function SimpleSelect({ control, name, options, label }) {\n  const getSelectOptions = () => {\n    return options.map((option) => {\n      return (\n        <MenuItem key={option} value={option}>\n          {option}\n        </MenuItem>\n      )\n    })\n  }\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ field: { onChange, value } }) => (\n        <>\n          <Typography>{label}</Typography>\n          <Select onChange={onChange} value={value} sx={{ minWidth: 100 }}>\n            {getSelectOptions()}\n          </Select>\n        </>\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport { Grid } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\nimport { SimpleSelect } from '../Components/SimpleSelect'\nimport { ironTypes } from '../util'\n\nexport function BackIronInputs({ control }) {\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item xs={6}>\n        <SimpleTextField\n          control={control}\n          name=\"BACK_IRON_HEIGHT\"\n          label=\"Back Iron Height\"\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <SimpleSelect\n          label=\"Iron Material\"\n          control={control}\n          name=\"BACK_IRON_MATERIAL\"\n          options={ironTypes}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\nimport { SimpleSelect } from '../Components/SimpleSelect'\nimport { magnetTypes } from '../util'\n\nexport function HalbachInputs({ control }) {\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={4}>\n        <SimpleTextField\n          control={control}\n          name=\"HALBACH_LENGTH\"\n          label=\"Length\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <SimpleTextField control={control} name=\"HALBACH_WIDTH\" label=\"Width\" />\n      </Grid>\n      <Grid item xs={4}>\n        <SimpleTextField\n          control={control}\n          name=\"HALBACH_HEIGHT\"\n          label=\"Height\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <SimpleSelect\n          label=\"Grade\"\n          control={control}\n          name=\"HALBACH_GRADE\"\n          options={magnetTypes}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\nimport { SimpleSelect } from '../Components/SimpleSelect'\nimport { magnetTypes } from '../util'\n\nexport function MagnetInputs({ control }) {\n  return (\n    <Grid container spacing={2} justifyContent=\"center\">\n      <Grid item xs={12}>\n        <Typography>Magnets</Typography>\n      </Grid>\n      <Grid item xs={4}>\n        <SimpleTextField\n          control={control}\n          name=\"MAGNET_LENGTH\"\n          label=\"Length\"\n        />\n      </Grid>\n      <Grid item xs={4}>\n        <SimpleTextField control={control} name=\"MAGNET_WIDTH\" label=\"Width\" />\n      </Grid>\n      <Grid item xs={4}>\n        <SimpleTextField\n          control={control}\n          name=\"MAGNET_HEIGHT\"\n          label=\"Height\"\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <SimpleSelect\n          label=\"Grade\"\n          control={control}\n          name=\"MAGNET_GRADE\"\n          options={magnetTypes}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography, Divider } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\nimport { ContainerToggle } from '../Components/ContainerToggle'\nimport { BackIronInputs } from './BackIronInputs'\nimport { HalbachInputs } from './HalbachInputs'\nimport { MagnetInputs } from './MagnetInputs'\n\nexport function RotorInputs({ control }) {\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12}>\n        <Typography variant=\"h2\">Rotor</Typography>\n      </Grid>\n      <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n        <Grid item xs={6} sm={4}>\n          <SimpleTextField control={control} name=\"AIR_GAP\" label=\"Air Gap\" />\n        </Grid>\n        <Grid item xs={6} sm={4}>\n          <SimpleTextField\n            control={control}\n            name=\"MAGNET_GAP\"\n            label=\"Magnet Spacing\"\n          />\n        </Grid>\n        <Grid item xs={6} sm={4}>\n          <SimpleTextField\n            control={control}\n            name=\"NUM_ROTOR_POLE_PAIRS\"\n            label=\"# of Pole Pairs\"\n          />\n        </Grid>\n      </Grid>\n      <Grid item xs={12}>\n        <MagnetInputs control={control} />\n      </Grid>\n      <Grid item xs={12}>\n        <ContainerToggle label=\"Halbach?\">\n          <HalbachInputs control={control} />\n        </ContainerToggle>\n      </Grid>\n      <Grid item xs={12}>\n        <ContainerToggle label=\"Back Iron?\">\n          <BackIronInputs control={control} />\n        </ContainerToggle>\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Controller } from 'react-hook-form'\nimport { FormControlLabel, Radio, RadioGroup } from '@mui/material'\n\nexport function SimpleRadio({ control, name, options }) {\n  const getRadioOptions = () => {\n    return options.map((option) => (\n      <FormControlLabel\n        key={option}\n        value={option}\n        label={option}\n        control={<Radio />}\n      />\n    ))\n  }\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field: { onChange, value } }) => (\n        <RadioGroup value={value} onChange={onChange}>\n          {getRadioOptions()}\n        </RadioGroup>\n      )}\n    />\n  )\n}\n","import React from 'react'\nimport { Grid, Alert } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\n\nexport function AnalysisInputs({ control }) {\n  return (\n    <Grid container spacing={4}>\n      <Grid container spacing={1} item xs={12}>\n        <Grid item xs={12}>\n          <SimpleTextField\n            control={control}\n            name=\"FILEPATH\"\n            label=\"File Path\"\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Alert severity=\"info\">\n            Must have a trailing slash. If using windows this must begin with a\n            drive letter and contain trailing backslashe. for example\n            (C:\\path\\to\\save\\)\n          </Alert>\n        </Grid>\n      </Grid>\n      <Grid container spacing={1} item xs={12}>\n        <Grid item xs={12}>\n          <SimpleTextField\n            control={control}\n            name=\"FILENAME\"\n            label=\"File Name\"\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Alert severity=\"info\">This must end in '.fem'</Alert>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography, Box } from '@mui/material'\nimport { SimpleRadio } from '../Components/SimpleRadio'\nimport { ContainerToggle } from '../Components/ContainerToggle'\nimport { AnalysisInputs } from './AnalysisInputs'\nimport { unitTypes } from '../util'\n\nexport function GeneralInputs({ control }) {\n  return (\n    <Grid container spacing={4} justifyContent=\"center\">\n      <Grid item xs={12}>\n        <Typography variant=\"h2\">General</Typography>\n      </Grid>\n      <Grid item>\n        <SimpleRadio control={control} name=\"UNITS\" options={unitTypes} />\n      </Grid>\n      <Grid item xs={12}>\n        <ContainerToggle label=\"Auto run Analysis?\">\n          <AnalysisInputs control={control} />\n        </ContainerToggle>\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\n\nexport function RectConductorInputs({ control }) {\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={6}>\n        <SimpleTextField\n          control={control}\n          name=\"CONDUCTOR_WIDTH\"\n          label=\"Conductor Width\"\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <SimpleTextField\n          control={control}\n          name=\"CONDUCTOR_HEIGHT\"\n          label=\"Conductor Height\"\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\n\nexport function CircleCondInputs({ control }) {\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n        <SimpleTextField\n          control={control}\n          name=\"CONDUCTOR_DIAMETER\"\n          label=\"Conductor Diameter\"\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography, Alert } from '@mui/material'\nimport { SimpleTextField } from '../Components/SimpleTextField'\nimport { SimpleSelect } from '../Components/SimpleSelect'\nimport { RectConductorInputs } from './RectConductorInputs'\nimport { CircleCondInputs } from './CircleCondInputs'\nimport { wireGauges } from '../util'\nimport { ContainerToggle } from '../Components/ContainerToggle'\n\nexport function ConductorInputs({ control }) {\n  return (\n    <Grid container spacing={4} justifyContent=\"center\">\n      <Grid item xs={12}>\n        <Alert severity=\"info\">\n          Currently this will only simulate 3 phase designs wiith overlapped\n          windings.\n        </Alert>\n      </Grid>\n      <Grid item xs={12}>\n        <ContainerToggle\n          label=\"Rectangle conductor?\"\n          childrenShowFalse={<CircleCondInputs control={control} />}\n        >\n          <RectConductorInputs control={control} />\n        </ContainerToggle>\n      </Grid>\n      <Grid container spacing={2} item xs={12}>\n        <Grid item xs={4}>\n          <SimpleTextField\n            control={control}\n            name=\"NUM_PHASE_TURNS\"\n            label=\"# of Turns per Phase\"\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <SimpleTextField\n            control={control}\n            name=\"ROTOR_TO_STATOR_GAP\"\n            label=\"Rotor to Stator Air Gap\"\n          />\n        </Grid>\n        <Grid item xs={4}>\n          <SimpleTextField\n            control={control}\n            name=\"PEAK_CURRENT\"\n            label=\"Peak Current\"\n          />\n        </Grid>\n      </Grid>\n      <Grid item xs={6}>\n        <SimpleSelect\n          label=\"Wire Gauge\"\n          control={control}\n          name=\"CONDUCTOR_MATERIAL\"\n          options={wireGauges}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport { ConductorInputs } from '../Containers/ConductorInputs'\n\nexport function StatorInputs({ control }) {\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12}>\n        <Typography variant=\"h2\">Stator</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <ConductorInputs control={control} />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography, Card, CardContent } from '@mui/material'\nimport { CopyScriptButton } from './CopyScriptButton'\nimport { formInputToLuaScript } from '../util'\nimport { useForm } from 'react-hook-form'\nimport { RotorInputs } from '../Containers/RotorInputs'\nimport { GeneralInputs } from '../Containers/GeneralInputs'\nimport { StatorInputs } from '../Containers/StatorInputs'\n\nexport function SimInputForm() {\n  // const stringInputFields = [\n  //   'MAGNET_GRADE',\n  //   'HALBACH_GRADE',\n  //   'BACK_IRON_MATERIAL',\n  //   'CONDUCTOR_MATERIAL',\n  //   'FILEPATH',\n  //   'FILENAME'\n  // ]\n\n  const { control, watch } = useForm({\n    defaultValues: {\n      UNITS: 'millimeters',\n      NUM_ROTOR_POLE_PAIRS: 3,\n      MAGNET_GAP: 1,\n      MAGNET_LENGTH: 1,\n      MAGNET_WIDTH: 1,\n      MAGNET_HEIGHT: 1,\n      MAGNET_GRADE: 'N50',\n      HALBACH: 0,\n      HALBACH_LENGTH: 1,\n      HALBACH_WIDTH: 1,\n      HALBACH_HEIGHT: 1,\n      HALBACH_GRADE: 'N50',\n      BACK_IRON: 0,\n      BACK_IRON_HEIGHT: 1,\n      BACK_IRON_MATERIAL: '1006 Steel',\n      AIR_GAP: 10,\n      STATOR: 1,\n      RECTANGLE_CONDUCTOR: 0,\n      CONDUCTOR_WIDTH: 1,\n      CONDUCTOR_HEIGHT: 1,\n      CONDUCTOR_DIAMETER: 2,\n      CONDUCTOR_MATERIAL: '32 AWG',\n      PEAK_CURRENT: 10,\n      ROTOR_TO_STATOR_GAP: 1,\n      NUM_PHASES: 3,\n      NUM_PHASE_TURNS: 4,\n      ANALYSIS: 0,\n      FILEPATH: '',\n      FILENAME: ''\n    }\n  })\n  const formVals = watch()\n  const outputText = formVals ? formInputToLuaScript(formVals) : ''\n\n  // function handleInputChange(e) {\n  //   const val = e.target.value\n  //   const isStringInputField = stringInputFields.includes(e.target.name)\n  //   const validNumInput = val.match(/^[0-9]+$|^[0-9]+\\.[0-9]*$/)\n\n  //   if (isStringInputField) {\n  //     formVals[e.target.name] = val\n  //     setFormVals({ ...formVals })\n  //     setOutputText(formInputToLuaScript(formVals))\n  //   }\n  //   if (validNumInput) {\n  //     let valToSave = parseFloat(val)\n  //     if (val.match(/\\.$/)) {\n  //       valToSave = val\n  //     }\n\n  //     formVals[e.target.name] = valToSave\n  //     setFormVals({ ...formVals })\n  //     setOutputText(formInputToLuaScript(formVals))\n  //   }\n  // }\n\n  return (\n    <Grid container spacing={5}>\n      <Grid item xs={12} container spacing={2} justifyContent=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h2\">Motor Sim Generator</Typography>\n        </Grid>\n        <Grid item xs={8}>\n          <Typography>\n            This form will generate a LUA script that can then be run in FEMM to\n            produce a 2D simulation of a 3 phase air-cored toroidially wound\n            axial flux permanant magnet motor.\n          </Typography>\n          <Typography>\n            This is still a work in progress and will hopefully support other\n            motor architechtures in the future.\n          </Typography>\n        </Grid>\n      </Grid>\n\n      <Grid item xs={12} lg={4}>\n        <GeneralInputs control={control} />\n      </Grid>\n\n      <Grid item xs={12} lg={4}>\n        <RotorInputs control={control} />\n      </Grid>\n\n      <Grid item xs={12} lg={4}>\n        <StatorInputs control={control} />\n      </Grid>\n\n      <Grid item xs={12}>\n        <CopyScriptButton outputText={outputText} />\n      </Grid>\n    </Grid>\n  )\n}\n","export const femmSimScript = `\n\n\nfunction init () \n  -- Create Doc\n  newdocument(0)\n  -- Init Problem\n  mi_probdef(0, UNITS, \"planar\", 1e-008, MAGNET_LENGTH)\n  -- Init Grid\n  mi_showgrid()\n  mi_setgrid(0.001, \"cart\")\n\n  init_materials()\n  init_circuits() \n  build_objects()\n\n  mi_zoomnatural()\n  \n  if ANALYSIS == 1 then \n    analyze()\n  end\n\nend\n\nfunction init_materials()\n  mi_getmaterial(\"Air\")\n  mi_getmaterial(BACK_IRON_MATERIAL)\n  mi_getmaterial(MAGNET_GRADE)\n  if HALBACH == 1 then\n    mi_getmaterial(HALBACH_GRADE)\n  end\n\n  if STATOR == 1 then\n    mi_getmaterial(CONDUCTOR_MATERIAL)\n  end\nend\n\nfunction init_circuits() \n  for i = 1, NUM_PHASES do\n    local phase_label = get_phase_label(i)\n    local current = get_phase_current(i)\n    local circuit_type = 1 -- 1 for series 0 for parallel\n    mi_addcircprop(phase_label, current, circuit_type)\n  end\nend\n\nfunction get_full_filepath()\n  return FILEPATH .. FILENAME\nend\n\nfunction get_v_gap () \n  return get_total_height() * 2\nend\n\nfunction get_h_gap ()\n  return get_total_width() * 1\nend\n\nfunction get_bound_height()\n  return get_v_gap() * 3\nend\n\nfunction get_bound_width() \n  return get_h_gap() * 3\nend\n\nfunction get_pole_width ()\n  local pole_width = MAGNET_WIDTH + MAGNET_GAP\n  if HALBACH == 1 then\n    return pole_width + HALBACH_WIDTH + MAGNET_GAP\n  end\n\n  return pole_width\nend\n\nfunction is_halbach_taller() \n  if HALBACH == 1 then\n    if MAGNET_HEIGHT < HALBACH_HEIGHT then\n      return 1\n    end\n  end\n\n  return 0\nend\n\nfunction get_tallest_magnet_height() \n  if is_halbach_taller() == 1 then\n    return HALBACH_HEIGHT\n  end\n\n  return MAGNET_HEIGHT\nend\n\nfunction get_magnet_height_diff() \n  if HALBACH == 1 then\n    return abs(MAGNET_HEIGHT - HALBACH_HEIGHT)\n  end\n\n  return 0\nend\n\nfunction get_total_width ()\n  local width = (get_nonhalbach_count() - 1) * (MAGNET_WIDTH + MAGNET_GAP)\n\n  if HALBACH == 1 then\n    return width + get_halbach_count() * (HALBACH_WIDTH + MAGNET_GAP)\n  end\n\n  return width\nend\n\nfunction get_total_height ()\n  local total_height = get_tallest_magnet_height() * 2 + AIR_GAP\n  if BACK_IRON == 1 then\n    return total_height + BACK_IRON_HEIGHT * 2\n  end\n\n  return total_height\nend\n\nfunction get_halbach_count() \n  return NUM_ROTOR_POLE_PAIRS * 2\nend\n\nfunction get_nonhalbach_count() \n  return NUM_ROTOR_POLE_PAIRS * 2 + 1 \nend\n\nfunction get_total_magnet_count ()\n  local count = get_nonhalbach_count()\n\n  if HALBACH == 1 then\n    return count + get_halbach_count()\n  end\n\n  return count\nend\n\nfunction get_phase_offset(phase)\n  return mod(phase, NUM_PHASES)\nend\n\nfunction get_phase_current(phase)\n  local angle = 360 / NUM_PHASES\n  return PEAK_CURRENT * sin(rad((phase - 1) * angle))\nend\n\nfunction get_phase_label(phase) \n  return \"Phase \" .. tostring(phase)\nend\n\n-- TODO make this use a look up table for diameters based on gague selected\n-- function get_coil_diameter()\n--   return CONDUCTOR_DIAMETER\n-- end\n\nfunction get_coil_gap()\n  return get_pole_width() / NUM_PHASES\nend\n\nfunction get_coil_offset(coil_num, phase)\n  local phase_offset = get_phase_offset(phase)\n  local total_offset = (coil_num * NUM_PHASES - phase_offset) * get_coil_gap() + get_pole_width() / 2\n  if RECTANGLE_CONDUCTOR == 1 then\n  total_offset = total_offset - CONDUCTOR_WIDTH / 2\n  end\n  return total_offset\nend\n\nfunction get_stator_pole_pairs()\n  return NUM_ROTOR_POLE_PAIRS - 1\nend\n\nfunction get_total_coils() \n  return NUM_PHASES * get_stator_pole_pairs()\nend\n\nfunction get_total_phase_legs() \n  return get_stator_pole_pairs() * 2\nend\n\nfunction get_total_legs() \n  return get_total_coils() * 2\nend\n\n\n\n\nfunction build_objects ()\n  build_air_bounds()\n  -- Build the sides separately\n  build_rotor(0)\n  build_rotor(1)\n  \n  if STATOR == 1 then\n    build_coil_phases()\n  end\n\n  build_analysis_nodes()\nend\n\nfunction build_air_bounds()\n  build_square_block(0, 0, get_bound_width() , get_bound_height(), \"Air\", \"\", 0, 0, 0, \"corner\")\nend\n\nfunction build_rotor(side) \n  build_rotor_magnets(side)\n  if BACK_IRON == 1 then\n    local x = get_h_gap()\n    local y = get_v_gap() - BACK_IRON_HEIGHT\n    if side == 1 then \n      y = get_v_gap() + AIR_GAP + get_tallest_magnet_height() * 2\n    end\n    build_rotor_iron(x, y)\n  end\nend\n\nfunction build_rotor_magnets (side)\n  local count = get_total_magnet_count()\n  \n  local modulus = 2\n  if HALBACH == 1 then \n    modulus = 4\n  end\n  \n  -- init horizontal offset at h gap\n  local current_x_offset = get_h_gap()\n  -- init horizontal offset at v gap. Add gap for the other side\n  local y_offset = get_v_gap()\n\n  local offset = 90\n  if HALBACH == 1 then\n    offset = 0\n  end\n\n  for i = 0, count - 1 do\n    local direction = (360/modulus) * (mod(i, modulus) + 1) + offset\n    if side == 1 then\n      direction =  (360/modulus) * (modulus - mod(i, modulus) + 1) + offset\n    end\n\n    local is_halbach = 0\n    local is_end = 0\n    local width = MAGNET_WIDTH\n    local current_y_offset = y_offset\n    if side == 1 then\n      current_y_offset = current_y_offset + AIR_GAP + get_tallest_magnet_height()\n    end\n    local height_diff = get_magnet_height_diff()\n\n    -- If iterating Halbach and If current iteration is halbach magnet\n    if HALBACH == 1 and mod(i, 2) == 1 then\n      is_halbach = 1\n      width = HALBACH_WIDTH\n      if side == 1 then\n        if is_halbach_taller() == 0 then\n          current_y_offset = current_y_offset + height_diff\n        end\n      end\n    else\n      if side == 1 then\n        if is_halbach_taller() == 1 then\n          current_y_offset = current_y_offset + height_diff\n        end\n      end\n    end\n\n    -- First or last iteration are half magnets\n    if i == 0 or i == (count - 1) then\n      is_end = 1\n      width = width / 2\n    end\n\n    build_magnet(current_x_offset, current_y_offset, direction, is_halbach, is_end)\n    current_x_offset = current_x_offset + width + MAGNET_GAP\n  end\nend\n\nfunction build_magnet (x, y, direction, is_halbach, is_end)\n  local w = MAGNET_WIDTH\n  local h = MAGNET_HEIGHT\n  local grade = MAGNET_GRADE\n\n  if is_halbach == 1 then\n    w = HALBACH_WIDTH\n    h = HALBACH_HEIGHT\n    grade = HALBACH_GRADE\n  end \n\n  if is_end == 1 then\n    w = w / 2\n  end\n\n  build_square_block(x, y, w, h, grade, \"\", direction, 0, 0, \"center\")\nend\n\nfunction build_rotor_iron (x, y)\n  build_square_block(x, y, get_total_width(), BACK_IRON_HEIGHT, BACK_IRON_MATERIAL, \"\", 0, 0, 0, \"center\")\nend\n\nfunction build_coil_phases()\n  local starting_side = 0\n  for i = 0, NUM_PHASES - 1 do\n    build_coil_phase(i, starting_side)\n    starting_side = starting_side + 1\n  end\nend\n\nfunction build_coil_phase(phase, starting_side)\n  for i = 0, get_total_phase_legs() - 1 do\n    build_coil_leg(i, phase, starting_side)\n    starting_side = starting_side + 1\n  end\nend\n\nfunction build_coil_leg(coil_num, phase, starting_side) \n  -- local x = get_coil_offset(coil_num, phase) + get_h_gap()\n  local x = get_coil_offset(coil_num, phase) + get_h_gap() + get_coil_gap() * 3\n  local y = get_v_gap() + get_tallest_magnet_height() + AIR_GAP - ROTOR_TO_STATOR_GAP - CONDUCTOR_DIAMETER\n  if RECTANGLE_CONDUCTOR == 1 then\n    y = get_v_gap() + get_tallest_magnet_height() + AIR_GAP - ROTOR_TO_STATOR_GAP - CONDUCTOR_HEIGHT\n  end\n  local turns = NUM_PHASE_TURNS\n  if mod(starting_side, 2) == 1 then\n    y = get_v_gap() + get_tallest_magnet_height() + ROTOR_TO_STATOR_GAP\n    turns = turns * -1\n  end\n  \n  local circuit = get_phase_label(phase + 1)\n  if RECTANGLE_CONDUCTOR == 1 then\n    local w = CONDUCTOR_WIDTH\n    local h = CONDUCTOR_HEIGHT\n    build_square_block(x, y, CONDUCTOR_WIDTH, CONDUCTOR_HEIGHT, CONDUCTOR_MATERIAL, circuit, 0, 0, turns, \"center\")\n  else \n    local h = CONDUCTOR_DIAMETER\n    build_circle_block(x, y, h, CONDUCTOR_MATERIAL, circuit, 0, 0, turns)\n  end\nend\n\nfunction build_analysis_nodes () \n  local x = get_h_gap()\n  local x1 = x + get_total_width()\n  local y = get_v_gap() + AIR_GAP / 2 + MAGNET_HEIGHT\n  \n  mi_addnode(x, y)\n  mi_addnode(x1, y)\nend\n\n\n\n\n\nfunction build_circle_block(x, y, h, material, circuit, direction, group, turns)\n  local y1 = y + h\n\n  mi_addnode(x, y)\n  mi_addnode(x, y1)\n\n  mi_addarc(x, y, x, y1, 180, 1)\n  mi_addarc(x, y1, x, y, 180, 1)\n\n  local labelX = x\n  local labelY = y + h/2\n\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\nend\n\nfunction build_square_block(x, y, w, h, material, circuit, direction, group, turns, label_position)\n  local x1 = x + w\n  local y1 = y + h\n\n  mi_addnode(x, y)\n  mi_addnode(x1, y)\n  mi_addnode(x, y1)\n  mi_addnode(x1, y1)\n\n  mi_addsegment(x, y, x1, y)\n  mi_addsegment(x1, y, x1, y1)\n  mi_addsegment(x, y1, x1, y1)\n  mi_addsegment(x, y1, x, y)\n\n  local labelX = x + w/2\n  local labelY = y + h/2\n  if (label_position == \"corner\") then\n    labelX = x + w/8\n    labelY = y + h/8\n  end\n\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\nend\n\nfunction add_block_props(labelX, labelY, material, circuit, direction, group, turns)\n  mi_addblocklabel(labelX, labelY)\n  mi_selectlabel(labelX, labelY)\n  mi_setblockprop(material, 1, 0, circuit, direction, group, turns)\n  mi_clearselected()\nend\n\n\n\nfunction analyze()\n  mi_saveas(get_full_filepath())\n  mi_analyze()\n  mi_loadsolution()\n  mo_showdensityplot(1, 0, 1, 0, \"bmag\")\nend\n\ninit()\n`","import YouTubeIcon from '@mui/icons-material/YouTube'\nimport GitHubIcon from '@mui/icons-material/GitHub'\nimport pjson from '../../package.json'\nimport { Grid, IconButton, Typography } from '@mui/material'\n\nexport function Footer() {\n  return (\n    <Grid container style={{ marginTop: 20 }} justifyContent=\"space-between\">\n      <Grid item>\n        <Typography>Version: {pjson.version}</Typography>\n      </Grid>\n      <Grid item>\n        <IconButton\n          target=\"_blank\"\n          variant=\"contained\"\n          color=\"primary\"\n          href=\"https://www.youtube.com/channel/UCQk0CkSexTb7GQvpGxj4kxw\"\n        >\n          <YouTubeIcon />\n        </IconButton>\n        <IconButton\n          target=\"_blank\"\n          variant=\"contained\"\n          color=\"primary\"\n          href=\"https://github.com/CJohnson25/femm-sim-gen-app/\"\n        >\n          <GitHubIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  )\n}\n","import './App.css'\nimport React from 'react'\nimport { Container, Divider, Grid } from '@mui/material'\nimport { SimInputForm } from './Components/SimInputForm'\nimport { Footer } from './Components/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"xl\">\n        <Grid container spacing={5}>\n          <Grid item xs={12}>\n            <SimInputForm />\n          </Grid>\n          <Grid item xs={12}>\n            <Footer />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}