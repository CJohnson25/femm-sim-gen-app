{"version":3,"sources":["Components/CopyToClipboard.js","App.js","reportWebVitals.js","index.js"],"names":["CopyToClipboard","children","React","useState","showTooltip","setShowTooltip","Tooltip","open","title","leaveDelay","onClose","copy","content","App","magnetTypes","defaultVals","UNITS","MAGNET_WIDTH","MAGNET_HEIGHT","MAGNET_GRADE","HALBACH","HALBACH_WIDTH","HALBACH_HEIGHT","HALBACH_GRADE","BACK_IRON","BACK_IRON_HEIGHT","IRON_MATERIAL","POLE_COUNT","AIR_GAP","MAGNET_GAP","formVals","setFormVals","showHalbachOptions","setShowHalbachOptions","showBackIronOptions","setShowBackIronOptions","generateOutputText","outputText","setOutputText","magnetOptions","map","value","i","MenuItem","halbachOptions","Grid","item","xs","FormControlLabel","filled","control","TextField","onChange","handleInputChange","name","label","FormControl","InputLabel","Select","backIronOptions","e","int","parseInt","target","val","JSON","stringify","replace","className","Container","maxWidth","container","spacing","Typography","component","FormLabel","RadioGroup","row","aria-label","Radio","Switch","halbach","inputVal","checked","backIron","fullWidth","multiline","rows","rowsMax","Button","variant","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oZAIO,SAASA,EAAT,GAAsC,IAAZC,EAAW,EAAXA,SAChC,EAAsCC,IAAMC,UAAS,GAArD,mBAAOC,EAAP,KAAoBC,EAApB,KAWA,OACC,cAACC,EAAA,EAAD,CACOC,KAAMH,EACNI,MAAO,uBACPC,WAAY,KACZC,QAdR,WACCL,GAAe,IASf,SAMQJ,EAAS,CAAEU,KAZpB,SAAgBC,GACZD,IAAKC,GACLP,GAAe,QCocLQ,MA3cf,WACE,IAAMC,EAAc,CAAC,MAAO,MAAO,OAC7BC,EAAc,CAClBC,MAAO,cACPC,aAAc,EACdC,cAAe,EACfC,aAAc,MACdC,QAAS,EACTC,cAAe,EACfC,eAAgB,EAChBC,cAAe,MACfC,UAAW,EACXC,iBAAkB,EAClBC,cAAe,aACfC,WAAY,EACZC,QAAS,EACTC,WAAW,GAGb,EAAgC3B,IAAMC,SAASY,GAA/C,mBAAOe,EAAP,KAAiBC,EAAjB,KACA,EAAoD7B,IAAMC,SAASY,EAAYK,SAA/E,mBAAOY,EAAP,KAA2BC,EAA3B,KACA,EAAsD/B,IAAMC,SAASY,EAAYS,WAAjF,mBAAOU,EAAP,KAA4BC,EAA5B,KACA,EAAoCjC,IAAMC,SAASiC,EAAmBrB,IAAtE,mBAAOsB,EAAP,KAAmBC,EAAnB,KAWMC,EAPGzB,EAAY0B,KAAI,SAACC,EAAOC,GAC7B,OACE,cAACC,EAAA,EAAD,CAAkBF,MAAOA,EAAzB,SAAiCA,GAAlBC,MAkCfE,EAzBF,qCACE,cAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAAST,cAAeiC,KAAK,gBAAgBC,MAAM,sBAG/G,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAASR,eAAgBgC,KAAK,iBAAkBC,MAAM,uBAGlH,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,eAACS,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,4BACA,cAACC,EAAA,EAAD,CAAQjB,MAAOX,EAASP,cAAxB,SACGgB,YAyCPoB,EAjBF,qCACE,cAACd,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAASL,iBAAkB6B,KAAK,mBAAmBC,MAAM,yBAGrH,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAASJ,cAAe4B,KAAK,gBAAgBC,MAAM,yBAoBrH,SAASF,EAAkBO,GACzB,IAAMC,EAAMC,SAASF,EAAEG,OAAOtB,OACxBuB,EAAMH,GAAYD,EAAEG,OAAOtB,MACjCX,EAAU8B,EAAEG,OAAOT,MAAQU,EAE3BjC,EAAY,eAAID,IAChBQ,EAAcF,EAAmBN,IAInC,SAASM,EAAmBN,GAO1B,OANwBmC,KAAKC,UAAUpC,EAAU,KAAM,GAC1BqC,QAAQ,eAAgB,IAClCA,QAAQ,YAAa,SACpBA,QAAQ,OAAQ,MAO9B,0nJA+NR,OACE,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,eAACzB,EAAA,EAAD,CAAM0B,WAAS,EAACzB,MAAI,EAAC0B,QAAS,EAAGzB,GAAI,GAArC,UACE,cAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,6DAEF,cAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC0B,EAAA,EAAD,0GAGF,cAAC5B,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACA,eAACS,EAAA,EAAD,CAAakB,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,mBACE,eAACE,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,QAAQ1B,SAAUC,EAAmBC,KAAK,QAAQb,MAAOX,EAASd,MAA7F,UACE,cAACgC,EAAA,EAAD,CAAkBP,MAAM,cAAcS,QAAS,cAAC6B,EAAA,EAAD,IAAWxB,MAAM,gBAChE,cAACP,EAAA,EAAD,CAAkBP,MAAM,SAASS,QAAS,cAAC6B,EAAA,EAAD,IAAWxB,MAAM,mBAKjE,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACAC,QAAM,EACJC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAASb,aAAcqC,KAAK,eAAeC,MAAM,qBAG7G,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAASZ,cAAeoC,KAAK,gBAAgBC,MAAM,sBAG/G,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,eAACS,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,2BACA,cAACC,EAAA,EAAD,CAAQN,SAAUC,EAAmBC,KAAK,eAAeb,MAAOX,EAASX,aAAzE,SACGoB,SAKP,eAACM,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACE,cAAC4B,EAAA,EAAD,CAAWD,UAAU,SAArB,sBACA,cAAC1B,EAAA,EAAD,CACEE,QAAS,cAAC8B,EAAA,EAAD,CAAQvC,MAAOX,EAASmD,QAAS7B,SA7UtD,SAA6BQ,GAC3B,IAAMsB,EAAWtB,EAAEG,OAAOoB,QAAU,EAAG,EACvCrD,EAASV,QAAU8D,EACdA,IACHpD,EAAST,cAAgB,EACzBS,EAASR,eAAiB,GAE5BS,EAAY,eAAID,IAChBG,EAAsBiD,GACtB5C,EAAcF,EAAmBN,KAoUkDwB,KAAK,YAC9EC,MAAQvB,EAA4B,MAAP,UAIhCA,EAAqBY,EAAiB,KAEvC,eAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACE,cAAC4B,EAAA,EAAD,CAAWD,UAAU,SAArB,wBACA,cAAC1B,EAAA,EAAD,CACEE,QAAS,cAAC8B,EAAA,EAAD,CAAQvC,MAAOX,EAASsD,SAAUhC,SAtTvD,SAA8BQ,GAC5B,IAAMsB,EAAWtB,EAAEG,OAAOoB,QAAU,EAAG,EACvCrD,EAASN,UAAY0D,EAChBA,IACHpD,EAASL,iBAAmB,GAE9BM,EAAY,eAAID,IAChBK,EAAuB+C,GACvB5C,EAAcF,EAAmBN,KA8SoDwB,KAAK,cAChFC,MAAQrB,EAA6B,MAAP,UAIjCA,EAAsByB,EAAkB,KAEzC,cAACd,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAmBZ,MAAOX,EAASH,WAAY2B,KAAK,aAAaC,MAAM,mBAIzG,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAoBZ,MAAOX,EAASF,QAAS0B,KAAK,UAAUC,MAAM,gBAIpG,cAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACEC,QAAM,EACNC,QAAS,cAACC,EAAA,EAAD,CAAWC,SAAUC,EAAoBZ,MAAOX,EAASD,WAAYyB,KAAK,aAAaC,MAAM,0BAK5G,eAACV,EAAA,EAAD,CAAM0B,WAAS,EAACC,QAAS,EAAG1B,MAAI,EAACC,GAAI,GAArC,UACE,cAACF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAACI,EAAA,EAAD,CAAWkC,WAAS,EAACC,WAAS,EAACC,KAAM,GAAIC,QAAS,GAAI/C,MAAOJ,MAE/D,cAACQ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,SACE,cAAC/C,EAAD,UACG,gBAAGW,EAAH,EAAGA,KAAH,OACC,cAAC8E,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAMjF,EAAK0B,IAHtB,gCCrbDwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f663c22.chunk.js","sourcesContent":["import React from 'react'\r\nimport copy from 'clipboard-copy'\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport function CopyToClipboard({children}) {\r\n\tconst [showTooltip, setShowTooltip] = React.useState(false)\r\n\r\n\tfunction handleOnTooltipClose() {\r\n\t\tsetShowTooltip(false)\r\n\t}\r\n\r\n\tfunction onCopy(content) {\r\n\t    copy(content)\r\n\t    setShowTooltip(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Tooltip\r\n\t        open={showTooltip}\r\n\t        title={\"Copied to clipboard!\"}\r\n\t        leaveDelay={1500}\r\n\t        onClose={handleOnTooltipClose}\r\n\t\t>\r\n\t        {children({ copy: onCopy })}\r\n\t\t</Tooltip>\r\n\t)\r\n}","import './App.css';\r\nimport 'fontsource-roboto';\r\nimport React from 'react';\r\nimport { Container, Grid, Typography, MenuItem, Button, FormControlLabel, FormControl, FormLabel, InputLabel, RadioGroup, Radio, Select, Switch, TextField } from '@material-ui/core';\r\nimport { CopyToClipboard } from './Components/CopyToClipboard.js'\r\n\r\nfunction App() {\r\n  const magnetTypes = ['N48', 'N50', 'N52']\r\n  const defaultVals = {\r\n    UNITS: 'millimeters',\r\n    MAGNET_WIDTH: 1,\r\n    MAGNET_HEIGHT: 1,\r\n    MAGNET_GRADE: 'N50',\r\n    HALBACH: 0,\r\n    HALBACH_WIDTH: 1,\r\n    HALBACH_HEIGHT: 1,\r\n    HALBACH_GRADE: 'N50',\r\n    BACK_IRON: 0,\r\n    BACK_IRON_HEIGHT: 1,\r\n    IRON_MATERIAL: \"1006 Steel\",\r\n    POLE_COUNT: 5,\r\n    AIR_GAP: 1,\r\n    MAGNET_GAP:0\r\n  }\r\n\r\n  const [formVals, setFormVals] = React.useState(defaultVals)\r\n  const [showHalbachOptions, setShowHalbachOptions] = React.useState(defaultVals.HALBACH)\r\n  const [showBackIronOptions, setShowBackIronOptions] = React.useState(defaultVals.BACK_IRON)\r\n  const [outputText, setOutputText] = React.useState(generateOutputText(defaultVals))\r\n\r\n\r\n  function getMagnetOptions () {\r\n    return magnetTypes.map((value, i) => {\r\n      return (\r\n        <MenuItem key={i} value={value}>{value}</MenuItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  const magnetOptions = getMagnetOptions()\r\n\r\n  const getHalbachOptions = () => {\r\n    return (\r\n      <>\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled\r\n            control={<TextField onChange={handleInputChange} value={formVals.HALBACH_WIDTH} name=\"HALBACH_WIDTH\" label=\"Halbach Width\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled\r\n            control={<TextField onChange={handleInputChange} value={formVals.HALBACH_HEIGHT} name=\"HALBACH_HEIGHT\"  label=\"Halbach Height\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <FormControl>\r\n            <InputLabel>Halbach Grade</InputLabel>\r\n            <Select value={formVals.HALBACH_GRADE}>\r\n              {magnetOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const halbachOptions = getHalbachOptions()\r\n\r\n  function handleHalbachChange(e) {\r\n    const inputVal = e.target.checked ? 1: 0\r\n    formVals.HALBACH = inputVal\r\n    if (!inputVal) {\r\n      formVals.HALBACH_WIDTH = 0\r\n      formVals.HALBACH_HEIGHT = 0\r\n    }\r\n    setFormVals({...formVals})\r\n    setShowHalbachOptions(inputVal)\r\n    setOutputText(generateOutputText(formVals))\r\n  }\r\n\r\n  const getBackIronOptions = () => {\r\n    return (\r\n      <>\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled\r\n            control={<TextField onChange={handleInputChange} value={formVals.BACK_IRON_HEIGHT} name=\"BACK_IRON_HEIGHT\" label=\"Back Iron Height\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled\r\n            control={<TextField onChange={handleInputChange} value={formVals.IRON_MATERIAL} name=\"IRON_MATERIAL\" label=\"Iron Material\" />}\r\n          />\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const backIronOptions = getBackIronOptions()\r\n\r\n  function handleBackIronChange(e) {\r\n    const inputVal = e.target.checked ? 1: 0\r\n    formVals.BACK_IRON = inputVal\r\n    if (!inputVal) {\r\n      formVals.BACK_IRON_HEIGHT = 0\r\n    }\r\n    setFormVals({...formVals})\r\n    setShowBackIronOptions(inputVal)\r\n    setOutputText(generateOutputText(formVals))\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    const int = parseInt(e.target.value)\r\n    const val = int ? int : e.target.value\r\n    formVals.[e.target.name] = val\r\n\r\n    setFormVals({...formVals})\r\n    setOutputText(generateOutputText(formVals))\r\n\r\n  }\r\n\r\n  function generateOutputText(formVals) {\r\n    const stringifiedVals = JSON.stringify(formVals, null, 2)\r\n    const sani = stringifiedVals.replace(/^{\\n?|\\n?}$/g, \"\")\r\n    const sani1 = sani.replace(/\"(.*)\": /g, \"$1 = \")\r\n    const sani2 = sani1.replace(/,\\n/g, \"\\n\")\r\n    const complete = sani2 + getProgramCode()\r\n\r\n    return complete\r\n  }\r\n\r\n  function getProgramCode() {\r\n    return `\r\n\r\n function init () \r\n  -- Create Doc\r\n  showconsole()\r\n  newdocument(0)\r\n\r\n  -- Init Problem\r\n  mi_probdef(0, UNITS, \"planar\", 1e-008)\r\n\r\n  -- Init Grid\r\n  mi_showgrid()\r\n  mi_setgrid(0.001, \"cart\")\r\n\r\n  -- Add materials\r\n  mi_getmaterial(\"Air\")\r\n  mi_getmaterial(IRON_MATERIAL)\r\n  mi_getmaterial(MAGNET_GRADE)\r\n  if HALBACH == 1 then\r\n    mi_getmaterial(HALBACH_GRADE)\r\n  end\r\n\r\n  build_objects()\r\n\r\n  mi_zoomnatural()\r\nend\r\n\r\nfunction get_v_gap () \r\n  return get_total_height() * 2\r\nend\r\n\r\nfunction get_h_gap ()\r\n  return get_total_width() * 1\r\nend\r\n\r\nfunction get_bound_height()\r\n  return get_v_gap() * 3\r\nend\r\n\r\nfunction get_bound_width() \r\n  return get_h_gap() * 3\r\nend\r\n\r\nfunction get_pole_width ()\r\n  local pole_width = MAGNET_WIDTH + MAGNET_GAP\r\n  if HALBACH == 1 then\r\n    pole_width = pole_width + HALBACH_WIDTH + MAGNET_GAP\r\n  end\r\n\r\n  return pole_width\r\nend\r\n\r\nfunction get_total_width ()\r\n  if HALBACH == 1 then\r\n    return (get_nonhalbach_count() - 1) * (MAGNET_WIDTH + MAGNET_GAP) + get_halbach_count() * (HALBACH_WIDTH + MAGNET_GAP)\r\n  else\r\n    return (get_nonhalbach_count() - 1) * (MAGNET_WIDTH + MAGNET_GAP)\r\n  end\r\nend\r\n\r\nfunction get_total_height ()\r\n  local total_height = MAGNET_HEIGHT*2 + AIR_GAP\r\n  if BACK_IRON == 1 then\r\n    total_height = total_height + BACK_IRON_HEIGHT*2\r\n  end\r\n\r\n  return total_height\r\nend\r\n\r\nfunction get_halbach_count() \r\n  return SIM_POLE_COUNT\r\nend\r\n\r\nfunction get_nonhalbach_count() \r\n  return SIM_POLE_COUNT + 1 \r\nend\r\n\r\nfunction get_total_magnet_count ()\r\n  if HALBACH == 1 then\r\n    return get_nonhalbach_count() + get_halbach_count()\r\n  else \r\n    return get_nonhalbach_count()\r\n  end\r\nend\r\n\r\n\r\nfunction build_objects ()\r\n  build_air_bounds()\r\n  -- Build the sides separately\r\n  build_rotor(0)\r\n  build_rotor(1)\r\n  build_analysis_nodes()\r\nend\r\n\r\nfunction build_air_bounds()\r\n  build_block(0, 0, get_bound_width() , get_bound_height(), \"Air\", \"corner\", 0)\r\nend\r\n\r\nfunction build_rotor(side) \r\n  build_rotor_magnets(side)\r\n  if BACK_IRON == 1 then\r\n    local x = get_h_gap()\r\n    local y = get_v_gap() - BACK_IRON_HEIGHT\r\n    if side == 1 then \r\n      y = get_v_gap() + MAGNET_HEIGHT*4\r\n    end\r\n    build_rotor_iron(x, y, BACK_IRON_HEIGHT, '1006 Steel')\r\n  end\r\nend\r\n\r\nfunction build_rotor_magnets (side)\r\n  local count = get_total_magnet_count()\r\n  \r\n  local modulus = 2\r\n  if HALBACH == 1 then \r\n    modulus = 4\r\n  end\r\n  \r\n  local current_offset = get_h_gap()\r\n  local y = get_v_gap()\r\n  if side == 1 then\r\n    y = get_v_gap() + MAGNET_HEIGHT*3\r\n  end\r\n\r\n  local offset = 90\r\n  if HALBACH == 1 then\r\n    offset = 0\r\n  end\r\n\r\n  for i = 0, count - 1 do\r\n    local direction = (360/modulus) * (mod(i, modulus) + 1) + offset\r\n    if side == 1 then\r\n      direction =  (360/modulus) * (modulus - mod(i, modulus) + 1) + offset\r\n    end\r\n\r\n    print('direction: ', direction)\r\n    local is_halbach = 0\r\n    local is_end = 0\r\n    local width = MAGNET_WIDTH\r\n\r\n    -- If iterating Halbach and If current iteration is halbach magnet\r\n    if HALBACH == 1 and mod(i, 2) == 1 then\r\n      is_halbach = 1\r\n      width = HALBACH_WIDTH\r\n    end\r\n\r\n    -- First or last iteration are half magnets\r\n    if i == 0 or i == count - 1 then\r\n      is_end = 1\r\n      width = width/2\r\n    end\r\n\r\n    build_magnet(current_offset, y, direction, is_halbach, is_end)\r\n    current_offset = current_offset + width + MAGNET_GAP\r\n  end\r\nend\r\n\r\nfunction build_magnet (x, y, direction, is_halbach, is_end)\r\n  local w = MAGNET_WIDTH\r\n  local h = MAGNET_HEIGHT\r\n  local grade = MAGNET_GRADE\r\n\r\n  if is_halbach == 1 then\r\n    w = HALBACH_WIDTH\r\n    h = HALBACH_HEIGHT\r\n    grade = HALBACH_GRADE\r\n  end \r\n\r\n  if is_end == 1 then\r\n    w = w/2\r\n  end\r\n\r\n  build_block(x, y, w, h, grade, \"center\", direction)\r\nend\r\n\r\n\r\nfunction build_rotor_iron (x, y)\r\n  build_block(x, y, get_total_width(), BACK_IRON_HEIGHT, IRON_MATERIAL, center, 0)\r\nend\r\n\r\nfunction build_block(x, y, w, h, material, label_position, direction)\r\n  local x1 = x + w\r\n  local y1 = y + h\r\n\r\n  mi_addnode(x, y)\r\n  mi_addnode(x1, y)\r\n  mi_addnode(x, y1)\r\n  mi_addnode(x1, y1)\r\n\r\n  mi_addsegment(x, y, x1, y)\r\n  mi_addsegment(x1, y, x1, y1)\r\n  mi_addsegment(x, y1, x1, y1)\r\n  mi_addsegment(x, y1, x, y)\r\n\r\n  local labelX = x + w/2\r\n  local labelY = y + h/2\r\n  if (label_position == \"corner\") then\r\n    labelX = x + w/8\r\n    labelY = y + h/8\r\n  end\r\n  mi_addblocklabel(labelX, labelY)\r\n  mi_selectlabel(labelX, labelY)\r\n  mi_setblockprop(material, 1, 0,\"\", direction)\r\n  mi_clearselected()\r\nend\r\n\r\nfunction build_analysis_nodes () \r\n  local x = get_h_gap()\r\n  local x1 = x + get_total_width()\r\n  local y = get_v_gap() + MAGNET_HEIGHT*2\r\n  \r\n  mi_addnode(x, y)\r\n  mi_addnode(x1, y)\r\nend\r\n\r\nfunction analyze_problem ()\r\n  \r\nend\r\n\r\ninit()\r\n    `\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container maxWidth=\"sm\">\r\n        <Grid container item spacing={2} xs={10}>\r\n          <Grid item xs={12}>\r\n            <h1>FEMM Simulation Generator</h1>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography>This form will generate a LUA script that can then be run in FEMM to produce a simulation</Typography>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">Units</FormLabel>\r\n              <RadioGroup row aria-label=\"units\" onChange={handleInputChange} name=\"UNITS\" value={formVals.UNITS} >\r\n                <FormControlLabel value=\"millimeters\" control={<Radio />} label=\"Millimeters\" />\r\n                <FormControlLabel value=\"inches\" control={<Radio />} label=\"Inches\" />\r\n              </RadioGroup>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <FormControlLabel\r\n            filled\r\n              control={<TextField onChange={handleInputChange} value={formVals.MAGNET_WIDTH} name=\"MAGNET_WIDTH\" label=\"Magnet Width\" />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControlLabel\r\n              filled\r\n              control={<TextField onChange={handleInputChange} value={formVals.MAGNET_HEIGHT} name=\"MAGNET_HEIGHT\" label=\"Magnet Height\" />}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl>\r\n              <InputLabel>Magnet Grade</InputLabel>\r\n              <Select onChange={handleInputChange} name=\"MAGNET_GRADE\" value={formVals.MAGNET_GRADE}>\r\n                {magnetOptions}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <FormLabel component=\"legend\">Halbach?</FormLabel>\r\n            <FormControlLabel\r\n              control={<Switch value={formVals.halbach} onChange={handleHalbachChange} name=\"HALBACH\" />}\r\n              label={!showHalbachOptions ? \"No\" : \"Yes\"}\r\n            />\r\n          </Grid>\r\n\r\n          {showHalbachOptions ? halbachOptions : null}\r\n\r\n          <Grid item xs={12}>\r\n            <FormLabel component=\"legend\">Back Iron?</FormLabel>\r\n            <FormControlLabel\r\n              control={<Switch value={formVals.backIron} onChange={handleBackIronChange} name=\"BACK_IRON\" />}\r\n              label={!showBackIronOptions ? \"No\" : \"Yes\"}\r\n            />\r\n          </Grid>\r\n\r\n          {showBackIronOptions ? backIronOptions : null}\r\n\r\n          <Grid item xs={4}>\r\n            <FormControlLabel\r\n              filled\r\n              control={<TextField onChange={handleInputChange} value={formVals.POLE_COUNT} name=\"POLE_COUNT\" label=\"Pole Count\" />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <FormControlLabel\r\n              filled\r\n              control={<TextField onChange={handleInputChange}  value={formVals.AIR_GAP} name=\"AIR_GAP\" label=\"Air Gap\" />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <FormControlLabel\r\n              filled\r\n              control={<TextField onChange={handleInputChange}  value={formVals.MAGNET_GAP} name=\"MAGNET_GAP\" label=\"Magnet Spacing\" />}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3} item xs={12}>\r\n          <Grid item xs={12}>\r\n            <TextField fullWidth multiline rows={20} rowsMax={20} value={outputText} />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <CopyToClipboard>\r\n              {({ copy }) => (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => copy(outputText)}\r\n                >\r\n                  Copy\r\n                </Button>\r\n              )}\r\n            </CopyToClipboard>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}