{"version":3,"sources":["Components/CopyToClipboard.js","util.js","femmSimScript.js","Components/SimInputForm.js","Components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["CopyToClipboard","children","React","useState","showTooltip","setShowTooltip","Tooltip","open","title","leaveDelay","onClose","copy","content","formInputToLuaScript","formVals","JSON","stringify","replace","SimInputForm","stringInputFields","defaultVals","UNITS","MAGNET_WIDTH","MAGNET_HEIGHT","MAGNET_GRADE","HALBACH","HALBACH_WIDTH","HALBACH_HEIGHT","HALBACH_GRADE","BACK_IRON","BACK_IRON_HEIGHT","IRON_MATERIAL","POLE_COUNT","AIR_GAP","MAGNET_GAP","CONDUCTOR","CONDUCTOR_DIAMETER","CONDUCTOR_MATERIAL","NUM_PHASE_COILS","NUM_PHASES","NUM_TURNS","ROTOR_TO_STATOR_GAP","setFormVals","showHalbachOptions","setShowHalbachOptions","showBackIronOptions","setShowBackIronOptions","showConductorOptions","setShowConductorOptions","outputText","setOutputText","createMenuItemList","listItems","map","value","i","MenuItem","handleInputChange","e","val","target","isStringInputField","includes","name","validNumInput","match","valToSave","parseFloat","magnetTypeOptions","ironTypeOptions","conductorTypeOptions","halbachOptions","Grid","item","xs","FormControlLabel","filled","control","TextField","onChange","label","FormControl","fullWidth","InputLabel","Select","backIronOptions","conductorOptions","Typography","container","spacing","component","FormLabel","RadioGroup","row","aria-label","Radio","Switch","inputVal","checked","multiline","rows","rowsMax","Button","variant","color","onClick","Footer","style","marginTop","justify","pjson","version","IconButton","href","App","className","Container","maxWidth","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5672fb0.chunk.js","sourcesContent":["import React from 'react'\r\nimport copy from 'clipboard-copy'\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nexport function CopyToClipboard({ children }) {\r\n\tconst [showTooltip, setShowTooltip] = React.useState(false)\r\n\r\n\tfunction handleOnTooltipClose() {\r\n\t\tsetShowTooltip(false)\r\n\t}\r\n\r\n\tfunction onCopy(content) {\r\n\t\tcopy(content)\r\n\t\tsetShowTooltip(true)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Tooltip\r\n\t\t\topen={showTooltip}\r\n\t\t\ttitle={\"Copied to clipboard!\"}\r\n\t\t\tleaveDelay={1500}\r\n\t\t\tonClose={handleOnTooltipClose}\r\n\t\t>\r\n\t\t\t{children({ copy: onCopy })}\r\n\t\t</Tooltip>\r\n\t)\r\n}","import { femmSimScript } from './femmSimScript'\r\n\r\nexport function formInputToLuaScript(formVals) {\r\n  const stringifiedVals = JSON.stringify(formVals, null, 2)\r\n  const sani = stringifiedVals.replace(/^{\\n?|\\n?}$/g, \"\")\r\n  const sani1 = sani.replace(/\"(.*)\": /g, \"$1 = \")\r\n  const sani2 = sani1.replace(/,\\n/g, \"\\n\")\r\n  const complete = sani2 + femmSimScript\r\n\r\n  return complete\r\n}","export const femmSimScript = `\r\nfunction init () \r\n  -- Create Doc\r\n  showconsole()\r\n  newdocument(0)\r\n\r\n  -- Init Problem\r\n  mi_probdef(0, UNITS, \"planar\", 1e-008)\r\n\r\n  -- Init Grid\r\n  mi_showgrid()\r\n  mi_setgrid(0.001, \"cart\")\r\n\r\n  -- Add materials\r\n  mi_getmaterial(\"Air\")\r\n  mi_getmaterial(IRON_MATERIAL)\r\n  mi_getmaterial(MAGNET_GRADE)\r\n  mi_getmaterial(CONDUCTOR_MATERIAL)\r\n  if HALBACH == 1 then\r\n    mi_getmaterial(HALBACH_GRADE)\r\n  end\r\n\r\n  -- Add Circuits\r\n  for i = 1, NUM_PHASES do\r\n    local phase_label = get_phase_label(i)\r\n    local current = get_phase_current()\r\n    local circuit_type = 1 -- 1 for series 0 for paralell\r\n    mi_addcircprop(phase_label, i, circuit_type)\r\n  end\r\n\r\n  build_objects()\r\n\r\n  mi_zoomnatural()\r\nend\r\n\r\nfunction get_phase_current()\r\n  return 32\r\nend\r\n\r\nfunction get_phase_label(phase) \r\n  return \"Phase \" .. tostring(phase)\r\nend\r\n\r\nfunction get_v_gap () \r\n  return get_total_height() * 2\r\nend\r\n\r\nfunction get_h_gap ()\r\n  return get_total_width() * 1\r\nend\r\n\r\nfunction get_bound_height()\r\n  return get_v_gap() * 3\r\nend\r\n\r\nfunction get_bound_width() \r\n  return get_h_gap() * 3\r\nend\r\n\r\nfunction get_pole_width ()\r\n  local pole_width = MAGNET_WIDTH + MAGNET_GAP\r\n  if HALBACH == 1 then\r\n    return pole_width + HALBACH_WIDTH + MAGNET_GAP\r\n  end\r\n\r\n  return pole_width\r\nend\r\n\r\nfunction is_halbach_taller() \r\n  if HALBACH == 1 then\r\n    if MAGNET_HEIGHT < HALBACH_HEIGHT then\r\n      return 1\r\n    end\r\n  end\r\n\r\n  return 0\r\nend\r\n\r\nfunction get_tallest_magnet_height() \r\n  if is_halbach_taller() == 1 then\r\n    return HALBACH_HEIGHT\r\n  end\r\n\r\n  return MAGNET_HEIGHT\r\nend\r\n\r\nfunction get_magnet_height_diff() \r\n  if HALBACH == 1 then\r\n    return abs(MAGNET_HEIGHT - HALBACH_HEIGHT)\r\n  end\r\n\r\n  return 0\r\nend\r\n\r\nfunction get_total_width ()\r\n  local width = (get_nonhalbach_count() - 1) * (MAGNET_WIDTH + MAGNET_GAP)\r\n\r\n  if HALBACH == 1 then\r\n    return width + get_halbach_count() * (HALBACH_WIDTH + MAGNET_GAP)\r\n  end\r\n\r\n  return width\r\nend\r\n\r\nfunction get_total_height ()\r\n  local total_height = get_tallest_magnet_height() * 2 + AIR_GAP\r\n  if BACK_IRON == 1 then\r\n    return total_height + BACK_IRON_HEIGHT * 2\r\n  end\r\n\r\n  return total_height\r\nend\r\n\r\nfunction get_halbach_count() \r\n  return POLE_COUNT\r\nend\r\n\r\nfunction get_nonhalbach_count() \r\n  return POLE_COUNT + 1 \r\nend\r\n\r\nfunction get_total_magnet_count ()\r\n  local count = get_nonhalbach_count()\r\n\r\n  if HALBACH == 1 then\r\n    return count + get_halbach_count()\r\n  end\r\n\r\n  return count\r\nend\r\n\r\n-- TODO make this use a look up table for diameters based on gague selected\r\nfunction get_coil_diameter()\r\n  return CONDUCTOR_DIAMETER\r\nend\r\n\r\nfunction get_phase_offset(phase)\r\n  return mod(phase, NUM_PHASES)\r\nend\r\n\r\nfunction get_coil_gap()\r\n  local legs = get_total_legs()\r\n  return  get_total_width() / legs\r\nend\r\n\r\nfunction get_coil_offset(coil_num, phase)\r\n  local phase_offset = get_phase_offset(phase)\r\n  return (coil_num * NUM_PHASES - phase_offset) * get_coil_gap()\r\nend\r\n\r\nfunction get_total_coils() \r\n  return NUM_PHASES * NUM_PHASE_COILS\r\nend\r\n\r\nfunction get_total_legs() \r\n  return get_total_coils() * 2\r\nend\r\n\r\nfunction build_coil_leg(coil_num, phase, starting_side) \r\n  local h = get_coil_diameter()\r\n  local x = get_coil_offset(coil_num, phase) + get_h_gap() + get_coil_gap() * 2\r\n  local y = get_v_gap() + get_tallest_magnet_height() + AIR_GAP - ROTOR_TO_STATOR_GAP - get_coil_diameter()\r\n  local turns = NUM_TURNS\r\n  if mod(starting_side, 2) == 1 then\r\n    y = get_v_gap() + get_tallest_magnet_height() + ROTOR_TO_STATOR_GAP\r\n    turns = turns * -1\r\n  end\r\n\r\n  local circuit = get_phase_label(phase + 1)\r\n  build_circle_block(x, y, h, CONDUCTOR_MATERIAL, circuit, 0, 0, turns)\r\nend\r\n\r\nfunction build_coil_phase(phase, starting_side)\r\n  for i = 0, (NUM_PHASE_COILS * 2) - 1 do\r\n    build_coil_leg(i, phase, starting_side)\r\n    starting_side = starting_side + 1\r\n  end\r\nend\r\n\r\nfunction build_coil_phases()\r\n  local starting_side = 0\r\n  for i = 0, NUM_PHASES - 1 do\r\n    build_coil_phase(i, starting_side)\r\n    starting_side = starting_side + 1\r\n  end\r\n  \r\nend\r\n\r\n\r\nfunction build_objects ()\r\n  build_air_bounds()\r\n  -- Build the sides separately\r\n  build_rotor(0)\r\n  build_rotor(1)\r\n  \r\n  if CONDUCTOR == 1 then\r\n    build_coil_phases()\r\n  end\r\n\r\n  build_analysis_nodes()\r\nend\r\n\r\nfunction build_air_bounds()\r\n  build_square_block(0, 0, get_bound_width() , get_bound_height(), \"Air\", \"\", 0, 0, 0, \"corner\")\r\nend\r\n\r\nfunction build_rotor(side) \r\n  build_rotor_magnets(side)\r\n  if BACK_IRON == 1 then\r\n    local x = get_h_gap()\r\n    local y = get_v_gap() - BACK_IRON_HEIGHT\r\n    if side == 1 then \r\n      y = get_v_gap() + AIR_GAP + get_tallest_magnet_height() * 2\r\n    end\r\n    build_rotor_iron(x, y)\r\n  end\r\nend\r\n\r\nfunction build_rotor_magnets (side)\r\n  local count = get_total_magnet_count()\r\n  \r\n  local modulus = 2\r\n  if HALBACH == 1 then \r\n    modulus = 4\r\n  end\r\n  \r\n  -- init horizontal offset at h gap\r\n  local current_x_offset = get_h_gap()\r\n  -- init horizontal offset at v gap. Add gap for the other side\r\n  local y_offset = get_v_gap()\r\n\r\n  local offset = 90\r\n  if HALBACH == 1 then\r\n    offset = 0\r\n  end\r\n\r\n  for i = 0, count - 1 do\r\n    local direction = (360/modulus) * (mod(i, modulus) + 1) + offset\r\n    if side == 1 then\r\n      direction =  (360/modulus) * (modulus - mod(i, modulus) + 1) + offset\r\n    end\r\n\r\n    local is_halbach = 0\r\n    local is_end = 0\r\n    local width = MAGNET_WIDTH\r\n    local current_y_offset = y_offset\r\n    if side == 1 then\r\n      current_y_offset = current_y_offset + AIR_GAP + get_tallest_magnet_height()\r\n    end\r\n    local height_diff = get_magnet_height_diff()\r\n\r\n    -- If iterating Halbach and If current iteration is halbach magnet\r\n    if HALBACH == 1 and mod(i, 2) == 1 then\r\n      is_halbach = 1\r\n      width = HALBACH_WIDTH\r\n      if side == 1 then\r\n        if not is_halbach_taller() then\r\n          current_y_offset = current_y_offset + height_diff\r\n        end\r\n      end\r\n    else\r\n      if side == 1 then\r\n        if is_halbach_taller() then\r\n          current_y_offset = current_y_offset + height_diff\r\n        end\r\n      end\r\n    end\r\n\r\n    -- First or last iteration are half magnets\r\n    if i == 0 or i == count - 1 then\r\n      is_end = 1\r\n      width = width/2\r\n    end\r\n\r\n    build_magnet(current_x_offset, current_y_offset, direction, is_halbach, is_end)\r\n    current_x_offset = current_x_offset + width + MAGNET_GAP\r\n  end\r\nend\r\n\r\nfunction build_magnet (x, y, direction, is_halbach, is_end)\r\n  local w = MAGNET_WIDTH\r\n  local h = MAGNET_HEIGHT\r\n  local grade = MAGNET_GRADE\r\n\r\n  if is_halbach == 1 then\r\n    w = HALBACH_WIDTH\r\n    h = HALBACH_HEIGHT\r\n    grade = HALBACH_GRADE\r\n  end \r\n\r\n  if is_end == 1 then\r\n    w = w/2\r\n  end\r\n\r\n  build_square_block(x, y, w, h, grade, \"\", direction, 0, 0, \"center\")\r\nend\r\n\r\n\r\nfunction build_rotor_iron (x, y)\r\n  build_square_block(x, y, get_total_width(), BACK_IRON_HEIGHT, IRON_MATERIAL, \"\", 0, 0, 0, \"center\")\r\nend\r\n\r\nfunction build_circle_block(x, y, h, material, circuit, direction, group, turns)\r\n  local y1 = y + h\r\n\r\n  mi_addnode(x, y)\r\n  mi_addnode(x, y1)\r\n\r\n  mi_addarc(x, y, x, y1, 180, 1)\r\n  mi_addarc(x, y1, x, y, 180, 1)\r\n\r\n  local labelX = x\r\n  local labelY = y + h/2\r\n\r\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\r\nend\r\n\r\nfunction build_square_block(x, y, w, h, material, circuit, direction, group, turns, label_position)\r\n  local x1 = x + w\r\n  local y1 = y + h\r\n\r\n  mi_addnode(x, y)\r\n  mi_addnode(x1, y)\r\n  mi_addnode(x, y1)\r\n  mi_addnode(x1, y1)\r\n\r\n  mi_addsegment(x, y, x1, y)\r\n  mi_addsegment(x1, y, x1, y1)\r\n  mi_addsegment(x, y1, x1, y1)\r\n  mi_addsegment(x, y1, x, y)\r\n\r\n  local labelX = x + w/2\r\n  local labelY = y + h/2\r\n  if (label_position == \"corner\") then\r\n    labelX = x + w/8\r\n    labelY = y + h/8\r\n  end\r\n\r\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\r\nend\r\n\r\nfunction add_block_props(labelX, labelY, material, circuit, direction, group, turns)\r\n  mi_addblocklabel(labelX, labelY)\r\n  mi_selectlabel(labelX, labelY)\r\n  mi_setblockprop(material, 1, 0, circuit, direction, group, turns)\r\n  mi_clearselected()\r\nend\r\n\r\nfunction build_analysis_nodes () \r\n  local x = get_h_gap()\r\n  local x1 = x + get_total_width()\r\n  local y = get_v_gap() + AIR_GAP/2 + MAGNET_HEIGHT\r\n  \r\n  mi_addnode(x, y)\r\n  mi_addnode(x1, y)\r\nend\r\n\r\n\r\nfunction analyze_problem ()\r\n  \r\nend\r\n\r\ninit()\r\n`\r\n","import React from 'react';\r\nimport { Grid, Typography, MenuItem, Button, FormControlLabel, FormControl, FormLabel, InputLabel, RadioGroup, Radio, Select, Switch, TextField } from '@material-ui/core';\r\nimport { CopyToClipboard } from './CopyToClipboard'\r\nimport { formInputToLuaScript } from '../util'\r\n\r\n\r\nexport function SimInputForm() {\r\n  const magnetTypes = ['N30', 'N33', 'N35', 'N38', 'N40', 'N42', 'N45', 'N48', 'N50', 'N52', 'N55']\r\n  const ironTypes = ['1006 Steel', '1010 Steel', '1018 Steel', '1020 Steel', '1117 Steel']\r\n  const conductorTypes = ['10 AWG', '12 AWG', '14 AWG', '16 AWG', '18 AWG', '20 AWG', '22 AWG', '24 AWG', '26 AWG', '28 AWG', '30 AWG', '32 AWG', '34 AWG', '36 AWG']\r\n  const stringInputFields = ['MAGNET_GRADE', 'HALBACH_GRADE', 'IRON_MATERIAL']\r\n\r\n  const defaultVals = {\r\n    UNITS: 'millimeters',\r\n    MAGNET_WIDTH: 1,\r\n    MAGNET_HEIGHT: 1,\r\n    MAGNET_GRADE: 'N50',\r\n    HALBACH: 0,\r\n    HALBACH_WIDTH: 1,\r\n    HALBACH_HEIGHT: 1,\r\n    HALBACH_GRADE: 'N50',\r\n    BACK_IRON: 0,\r\n    BACK_IRON_HEIGHT: 1,\r\n    IRON_MATERIAL: \"1006 Steel\",\r\n    POLE_COUNT: 3,\r\n    AIR_GAP: 10,\r\n    MAGNET_GAP: 1,\r\n    CONDUCTOR: 0,\r\n    CONDUCTOR_DIAMETER: 3,\r\n    CONDUCTOR_MATERIAL: \"32 AWG\",\r\n    NUM_PHASE_COILS: 5,\r\n    NUM_PHASES: 3,\r\n    NUM_TURNS: 4,\r\n    ROTOR_TO_STATOR_GAP: 1\r\n  }\r\n\r\n  const [formVals, setFormVals] = React.useState(defaultVals)\r\n  const [showHalbachOptions, setShowHalbachOptions] = React.useState(defaultVals.HALBACH)\r\n  const [showBackIronOptions, setShowBackIronOptions] = React.useState(defaultVals.BACK_IRON)\r\n  const [showConductorOptions, setShowConductorOptions] = React.useState(defaultVals.CONDUCTOR)\r\n  const [outputText, setOutputText] = React.useState(formInputToLuaScript(defaultVals))\r\n\r\n  function createMenuItemList(listItems) {\r\n\r\n    return listItems.map((value, i) => {\r\n      return (\r\n        <MenuItem key={i} value={value}>{value}</MenuItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  const getHalbachOptions = () => {\r\n    return (\r\n      <>\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.HALBACH_WIDTH} name=\"HALBACH_WIDTH\" label=\"Halbach Width\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.HALBACH_HEIGHT} name=\"HALBACH_HEIGHT\" label=\"Halbach Height\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Halbach Grade</InputLabel>\r\n            <Select onChange={handleInputChange} name=\"HALBACH_GRADE\" value={formVals.HALBACH_GRADE}>\r\n              {magnetTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getBackIronOptions = () => {\r\n    return (\r\n      <>\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.BACK_IRON_HEIGHT} name=\"BACK_IRON_HEIGHT\" label=\"Back Iron Height\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControl fullWidth>Iron Material\r\n              <Select onChange={handleInputChange} name=\"IRON_MATERIAL\" value={formVals.IRON_MATERIAL}>\r\n              {ironTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getConductorOptions = () => {\r\n    return (\r\n      <>\r\n        <Grid item xs={12} >\r\n          <Typography>Currently this will only correcetly simulate 3 Phase designs</Typography>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.CONDUCTOR_DIAMETER} name=\"CONDUCTOR_DIAMETER\" label=\"Conductor Diameter\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControl fullWidth>Conductor Material\r\n              <Select onChange={handleInputChange} name=\"CONDUCTOR_MATERIAL\" value={formVals.CONDUCTOR_MATERIAL}>\r\n              {conductorTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {/* <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.NUM_PHASES} name=\"NUM_PHASES\" label=\"# of Phases\" />}\r\n          />\r\n        </Grid> */}\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.NUM_PHASE_COILS} name=\"NUM_PHASE_COILS\" label=\"# of Coils per Phase\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.NUM_TURNS} name=\"NUM_TURNS\" label=\"# of Turns per Phase\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.ROTOR_TO_STATOR_GAP} name=\"ROTOR_TO_STATOR_GAP\" label=\"Rotor to Stator Air Gap\" />}\r\n          />\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  function handleHalbachChange(e) {\r\n    const inputVal = e.target.checked ? 1 : 0\r\n    formVals.HALBACH = inputVal\r\n\r\n    setFormVals({ ...formVals })\r\n    setShowHalbachOptions(inputVal)\r\n    setOutputText(formInputToLuaScript(formVals))\r\n  }\r\n\r\n  function handleBackIronChange(e) {\r\n    const inputVal = e.target.checked ? 1 : 0\r\n    formVals.BACK_IRON = inputVal\r\n\r\n    setFormVals({ ...formVals })\r\n    setShowBackIronOptions(inputVal)\r\n    setOutputText(formInputToLuaScript(formVals))\r\n  }\r\n\r\n  function handleConductorChange(e) {\r\n    const inputVal = e.target.checked ? 1 : 0\r\n    formVals.CONDUCTOR = inputVal\r\n\r\n    setFormVals({ ...formVals })\r\n    setShowConductorOptions(inputVal)\r\n    setOutputText(formInputToLuaScript(formVals))\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    const val = e.target.value\r\n    const isStringInputField = stringInputFields.includes(e.target.name)\r\n    const validNumInput = val.match(/^[0-9]+$|^[0-9]+\\.[0-9]*$/)\r\n\r\n    if (isStringInputField) {\r\n      formVals[e.target.name] = val\r\n      setFormVals({ ...formVals })\r\n      setOutputText(formInputToLuaScript(formVals))\r\n    }\r\n    if (validNumInput) {\r\n      let valToSave = parseFloat(val)\r\n      if (val.match(/\\.$/)) {\r\n        valToSave = val\r\n      }\r\n\r\n      formVals[e.target.name] = valToSave\r\n      setFormVals({ ...formVals })\r\n      setOutputText(formInputToLuaScript(formVals))\r\n    }\r\n\r\n  }\r\n\r\n  const magnetTypeOptions = createMenuItemList(magnetTypes)\r\n  const ironTypeOptions = createMenuItemList(ironTypes)\r\n  const conductorTypeOptions = createMenuItemList(conductorTypes)\r\n  const halbachOptions = getHalbachOptions()\r\n  const backIronOptions = getBackIronOptions()\r\n  const conductorOptions = getConductorOptions()\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <h1> 3 Phase Air Core Toroidial Axial Flux PM motor</h1>\r\n          <h2>FEMM Simulation Generator</h2>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Typography>This form will generate a LUA script that can then be run in FEMM to produce a 2D simulation of a 3 phase air-cored toroidially wound axial flux permanant magnet motor.</Typography>\r\n          <Typography>This is still a work in progress and will hopefully support other motor architechtures in the future.</Typography>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={4}>\r\n        <Grid item xs={12}>\r\n          <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">Units</FormLabel>\r\n            <RadioGroup row aria-label=\"units\" onChange={handleInputChange} name=\"UNITS\" value={formVals.UNITS} >\r\n              <FormControlLabel value=\"millimeters\" control={<Radio />} label=\"Millimeters\" />\r\n              <FormControlLabel value=\"inches\" control={<Radio />} label=\"Inches\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.MAGNET_WIDTH} name=\"MAGNET_WIDTH\" label=\"Magnet Width\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.MAGNET_HEIGHT} name=\"MAGNET_HEIGHT\" label=\"Magnet Height\" />}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <FormControl fullWidth>\r\n            <InputLabel>Magnet Grade</InputLabel>\r\n            <Select onChange={handleInputChange} name=\"MAGNET_GRADE\" value={formVals.MAGNET_GRADE}>\r\n              {magnetTypeOptions}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <FormLabel component=\"legend\">Halbach?</FormLabel>\r\n          <FormControlLabel\r\n            control={<Switch value={formVals.HALBACH} onChange={handleHalbachChange} name=\"HALBACH\" />}\r\n            label={!showHalbachOptions ? \"No\" : \"Yes\"}\r\n          />\r\n        </Grid>\r\n\r\n        {showHalbachOptions ? halbachOptions : null}\r\n\r\n        <Grid item xs={12}>\r\n          <FormLabel component=\"legend\">Back Iron?</FormLabel>\r\n          <FormControlLabel\r\n            control={<Switch value={formVals.BACK_IRON} onChange={handleBackIronChange} name=\"BACK_IRON\" />}\r\n            label={!showBackIronOptions ? \"No\" : \"Yes\"}\r\n          />\r\n        </Grid>\r\n\r\n        {showBackIronOptions ? backIronOptions : null}\r\n\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.POLE_COUNT} name=\"POLE_COUNT\" label=\"Pole Count\" />}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.AIR_GAP} name=\"AIR_GAP\" label=\"Air Gap\" />}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={4}>\r\n          <FormControlLabel\r\n            filled=\"true\"\r\n            control={<TextField onChange={handleInputChange} value={formVals.MAGNET_GAP} name=\"MAGNET_GAP\" label=\"Magnet Spacing\" />}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <FormLabel component=\"legend\">Simulate Air Core?</FormLabel>\r\n          <FormControlLabel\r\n            control={<Switch value={formVals.CONDUCTOR} onChange={handleConductorChange} name=\"CONDUCTOR\" />}\r\n            label={!showConductorOptions ? \"No\" : \"Yes\"}\r\n          />\r\n        </Grid>\r\n\r\n        {showConductorOptions ? conductorOptions : null}\r\n\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <h2>Output:</h2>\r\n          <Typography>Copy this LUA script and paste it in the LUA console in your FEMM program.</Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField fullWidth multiline rows={20} rowsMax={20} value={outputText} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <CopyToClipboard>\r\n            {({ copy }) => (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => copy(outputText)}\r\n              >\r\n                Copy\r\n              </Button>\r\n            )}\r\n          </CopyToClipboard>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}","import YouTubeIcon from '@material-ui/icons/YouTube';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport pjson from '../../package.json'\r\nimport { Grid, IconButton, Typography } from '@material-ui/core';\r\n\r\nexport function Footer() {\r\n  return (\r\n    <Grid container style={{ marginTop: 40 }} justify=\"flex-end\">\r\n      <Grid item xs={8}>\r\n        <Typography>Version: {pjson.version}</Typography>\r\n      </Grid>\r\n      <Grid item xs={1} >\r\n        <IconButton target=\"_blank\" variant=\"contained\" color=\"primary\" href=\"https://www.youtube.com/channel/UCQk0CkSexTb7GQvpGxj4kxw\">\r\n          <YouTubeIcon />\r\n        </IconButton>\r\n      </Grid>\r\n      <Grid item xs={1} >\r\n        <IconButton target=\"_blank\" variant=\"contained\" color=\"primary\" href=\"https://github.com/CJohnson25/femm-sim-gen-app/\">\r\n          <GitHubIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}","import './App.css';\r\nimport 'fontsource-roboto';\r\nimport React from 'react';\r\nimport { Container, Divider } from '@material-ui/core';\r\nimport { SimInputForm } from './Components/SimInputForm'\r\nimport { Footer } from './Components/Footer'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container maxWidth=\"sm\">\r\n        <SimInputForm />\r\n      </Container>\r\n      <Divider style={{ marginTop: 40 }} />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}