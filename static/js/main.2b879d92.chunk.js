(this["webpackJsonpfemm-sim-gen-app"]=this["webpackJsonpfemm-sim-gen-app"]||[]).push([[0],{64:function(e){e.exports=JSON.parse('{"name":"femm-sim-gen-app","homepage":"http://CJohnson25.github.io/femm-sim-gen-app","version":"0.11.0","private":true,"dependencies":{"@material-ui/core":"^4.11.3","@material-ui/icons":"^4.11.2","@testing-library/jest-dom":"^5.12.0","@testing-library/react":"^11.2.6","@testing-library/user-event":"^12.8.3","clipboard-copy":"^4.0.1","fontsource-roboto":"^4.0.0","react":"^17.0.2","react-dom":"^17.0.2","react-scripts":"4.0.3","web-vitals":"^1.1.1"},"scripts":{"predeploy":"npm run build","deploy":"gh-pages -d build","start":"react-scripts start","build":"react-scripts build","test":"react-scripts test","eject":"react-scripts eject"},"eslintConfig":{"extends":["react-app","react-app/jest"]},"browserslist":{"production":[">0.2%","not dead","not op_mini all"],"development":["last 1 chrome version","last 1 firefox version","last 1 safari version"]},"devDependencies":{"gh-pages":"^3.1.0"}}')},82:function(e,n,t){},83:function(e,n,t){},94:function(e,n,t){"use strict";t.r(n);var a=t(0),i=t.n(a),l=t(10),c=t.n(l),r=(t(82),t(83),t(84),t(142)),o=t(143),s=t(31),_=t(21),d=t(148),h=t(132),u=t(133),j=t(149),b=t(136),O=t(137),A=t(144),g=t(96),x=t(97),f=t(138),m=t(139),T=t(140),p=t(151),C=t(145),H=t(141),E=t(57),N=t.n(E),R=t(147),I=t(2);function G(e){var n=e.children,t=i.a.useState(!1),a=Object(_.a)(t,2),l=a[0],c=a[1];return Object(I.jsx)(R.a,{open:l,title:"Copied to clipboard!",leaveDelay:1500,onClose:function(){c(!1)},children:n({copy:function(e){N()(e),c(!0)}})})}function M(e){return JSON.stringify(e,null,2).replace(/^{\n?|\n?}$/g,"").replace(/"(.*)": /g,"$1 = ").replace(/,\n/g,"\n")+'\n\n\nfunction init () \n  -- Create Doc\n  newdocument(0)\n  -- Init Problem\n  mi_probdef(0, UNITS, "planar", 1e-008, MAGNET_LENGTH)\n  -- Init Grid\n  mi_showgrid()\n  mi_setgrid(0.001, "cart")\n\n  init_materials()\n  init_circuits() \n  build_objects()\n\n  mi_zoomnatural()\n  \n  if ANALYSIS == 1 then \n    analyze()\n  end\n\nend\n\nfunction init_materials()\n  mi_getmaterial("Air")\n  mi_getmaterial(BACK_IRON_MATERIAL)\n  mi_getmaterial(MAGNET_GRADE)\n  if HALBACH == 1 then\n    mi_getmaterial(HALBACH_GRADE)\n  end\n\n  if STATOR == 1 then\n    mi_getmaterial(CONDUCTOR_MATERIAL)\n  end\nend\n\nfunction init_circuits() \n  for i = 1, NUM_PHASES do\n    local phase_label = get_phase_label(i)\n    local current = get_phase_current(i)\n    local circuit_type = 1 -- 1 for series 0 for parallel\n    mi_addcircprop(phase_label, current, circuit_type)\n  end\nend\n\nfunction get_full_filepath()\n  return FILEPATH .. FILENAME\nend\n\nfunction get_v_gap () \n  return get_total_height() * 2\nend\n\nfunction get_h_gap ()\n  return get_total_width() * 1\nend\n\nfunction get_bound_height()\n  return get_v_gap() * 3\nend\n\nfunction get_bound_width() \n  return get_h_gap() * 3\nend\n\nfunction get_pole_width ()\n  local pole_width = MAGNET_WIDTH + MAGNET_GAP\n  if HALBACH == 1 then\n    return pole_width + HALBACH_WIDTH + MAGNET_GAP\n  end\n\n  return pole_width\nend\n\nfunction is_halbach_taller() \n  if HALBACH == 1 then\n    if MAGNET_HEIGHT < HALBACH_HEIGHT then\n      return 1\n    end\n  end\n\n  return 0\nend\n\nfunction get_tallest_magnet_height() \n  if is_halbach_taller() == 1 then\n    return HALBACH_HEIGHT\n  end\n\n  return MAGNET_HEIGHT\nend\n\nfunction get_magnet_height_diff() \n  if HALBACH == 1 then\n    return abs(MAGNET_HEIGHT - HALBACH_HEIGHT)\n  end\n\n  return 0\nend\n\nfunction get_total_width ()\n  local width = (get_nonhalbach_count() - 1) * (MAGNET_WIDTH + MAGNET_GAP)\n\n  if HALBACH == 1 then\n    return width + get_halbach_count() * (HALBACH_WIDTH + MAGNET_GAP)\n  end\n\n  return width\nend\n\nfunction get_total_height ()\n  local total_height = get_tallest_magnet_height() * 2 + AIR_GAP\n  if BACK_IRON == 1 then\n    return total_height + BACK_IRON_HEIGHT * 2\n  end\n\n  return total_height\nend\n\nfunction get_halbach_count() \n  return NUM_ROTOR_POLE_PAIRS * 2\nend\n\nfunction get_nonhalbach_count() \n  return NUM_ROTOR_POLE_PAIRS * 2 + 1 \nend\n\nfunction get_total_magnet_count ()\n  local count = get_nonhalbach_count()\n\n  if HALBACH == 1 then\n    return count + get_halbach_count()\n  end\n\n  return count\nend\n\nfunction get_phase_offset(phase)\n  return mod(phase, NUM_PHASES)\nend\n\nfunction get_phase_current(phase)\n  local angle = 360 / NUM_PHASES\n  return PEAK_CURRENT * sin(rad((phase - 1) * angle))\nend\n\nfunction get_phase_label(phase) \n  return "Phase " .. tostring(phase)\nend\n\n-- TODO make this use a look up table for diameters based on gague selected\n-- function get_coil_diameter()\n--   return CONDUCTOR_DIAMETER\n-- end\n\nfunction get_coil_gap()\n  return get_pole_width() / NUM_PHASES\nend\n\nfunction get_coil_offset(coil_num, phase)\n  local phase_offset = get_phase_offset(phase)\n  local total_offset = (coil_num * NUM_PHASES - phase_offset) * get_coil_gap() + get_pole_width() / 2\n  if RECTANGLE_CONDUCTOR == 1 then\n  total_offset = total_offset - CONDUCTOR_WIDTH / 2\n  end\n  return total_offset\nend\n\nfunction get_stator_pole_pairs()\n  return NUM_ROTOR_POLE_PAIRS - 1\nend\n\nfunction get_total_coils() \n  return NUM_PHASES * get_stator_pole_pairs()\nend\n\nfunction get_total_phase_legs() \n  return get_stator_pole_pairs() * 2\nend\n\nfunction get_total_legs() \n  return get_total_coils() * 2\nend\n\n\n\n\nfunction build_objects ()\n  build_air_bounds()\n  -- Build the sides separately\n  build_rotor(0)\n  build_rotor(1)\n  \n  if STATOR == 1 then\n    build_coil_phases()\n  end\n\n  build_analysis_nodes()\nend\n\nfunction build_air_bounds()\n  build_square_block(0, 0, get_bound_width() , get_bound_height(), "Air", "", 0, 0, 0, "corner")\nend\n\nfunction build_rotor(side) \n  build_rotor_magnets(side)\n  if BACK_IRON == 1 then\n    local x = get_h_gap()\n    local y = get_v_gap() - BACK_IRON_HEIGHT\n    if side == 1 then \n      y = get_v_gap() + AIR_GAP + get_tallest_magnet_height() * 2\n    end\n    build_rotor_iron(x, y)\n  end\nend\n\nfunction build_rotor_magnets (side)\n  local count = get_total_magnet_count()\n  \n  local modulus = 2\n  if HALBACH == 1 then \n    modulus = 4\n  end\n  \n  -- init horizontal offset at h gap\n  local current_x_offset = get_h_gap()\n  -- init horizontal offset at v gap. Add gap for the other side\n  local y_offset = get_v_gap()\n\n  local offset = 90\n  if HALBACH == 1 then\n    offset = 0\n  end\n\n  for i = 0, count - 1 do\n    local direction = (360/modulus) * (mod(i, modulus) + 1) + offset\n    if side == 1 then\n      direction =  (360/modulus) * (modulus - mod(i, modulus) + 1) + offset\n    end\n\n    local is_halbach = 0\n    local is_end = 0\n    local width = MAGNET_WIDTH\n    local current_y_offset = y_offset\n    if side == 1 then\n      current_y_offset = current_y_offset + AIR_GAP + get_tallest_magnet_height()\n    end\n    local height_diff = get_magnet_height_diff()\n\n    -- If iterating Halbach and If current iteration is halbach magnet\n    if HALBACH == 1 and mod(i, 2) == 1 then\n      is_halbach = 1\n      width = HALBACH_WIDTH\n      if side == 1 then\n        if is_halbach_taller() == 0 then\n          current_y_offset = current_y_offset + height_diff\n        end\n      end\n    else\n      if side == 1 then\n        if is_halbach_taller() == 1 then\n          current_y_offset = current_y_offset + height_diff\n        end\n      end\n    end\n\n    -- First or last iteration are half magnets\n    if i == 0 or i == (count - 1) then\n      is_end = 1\n      width = width / 2\n    end\n\n    build_magnet(current_x_offset, current_y_offset, direction, is_halbach, is_end)\n    current_x_offset = current_x_offset + width + MAGNET_GAP\n  end\nend\n\nfunction build_magnet (x, y, direction, is_halbach, is_end)\n  local w = MAGNET_WIDTH\n  local h = MAGNET_HEIGHT\n  local grade = MAGNET_GRADE\n\n  if is_halbach == 1 then\n    w = HALBACH_WIDTH\n    h = HALBACH_HEIGHT\n    grade = HALBACH_GRADE\n  end \n\n  if is_end == 1 then\n    w = w / 2\n  end\n\n  build_square_block(x, y, w, h, grade, "", direction, 0, 0, "center")\nend\n\nfunction build_rotor_iron (x, y)\n  build_square_block(x, y, get_total_width(), BACK_IRON_HEIGHT, BACK_IRON_MATERIAL, "", 0, 0, 0, "center")\nend\n\nfunction build_coil_phases()\n  local starting_side = 0\n  for i = 0, NUM_PHASES - 1 do\n    build_coil_phase(i, starting_side)\n    starting_side = starting_side + 1\n  end\nend\n\nfunction build_coil_phase(phase, starting_side)\n  for i = 0, get_total_phase_legs() - 1 do\n    build_coil_leg(i, phase, starting_side)\n    starting_side = starting_side + 1\n  end\nend\n\nfunction build_coil_leg(coil_num, phase, starting_side) \n  -- local x = get_coil_offset(coil_num, phase) + get_h_gap()\n  local x = get_coil_offset(coil_num, phase) + get_h_gap() + get_coil_gap() * 3\n  local y = get_v_gap() + get_tallest_magnet_height() + AIR_GAP - ROTOR_TO_STATOR_GAP - CONDUCTOR_DIAMETER\n  if RECTANGLE_CONDUCTOR == 1 then\n    local y = get_v_gap() + get_tallest_magnet_height() + AIR_GAP - ROTOR_TO_STATOR_GAP - CONDUCTOR_HEIGHT\n  end\n  local turns = NUM_PHASE_TURNS\n  if mod(starting_side, 2) == 1 then\n    y = get_v_gap() + get_tallest_magnet_height() + ROTOR_TO_STATOR_GAP\n    turns = turns * -1\n  end\n  \n  local circuit = get_phase_label(phase + 1)\n  if RECTANGLE_CONDUCTOR == 1 then\n    local w = CONDUCTOR_WIDTH\n    local h = CONDUCTOR_HEIGHT\n    build_square_block(x, y, CONDUCTOR_WIDTH, CONDUCTOR_HEIGHT, CONDUCTOR_MATERIAL, circuit, 0, 0, turns, "center")\n  else \n    local h = CONDUCTOR_DIAMETER\n    build_circle_block(x, y, h, CONDUCTOR_MATERIAL, circuit, 0, 0, turns)\n  end\nend\n\nfunction build_analysis_nodes () \n  local x = get_h_gap()\n  local x1 = x + get_total_width()\n  local y = get_v_gap() + AIR_GAP / 2 + MAGNET_HEIGHT\n  \n  mi_addnode(x, y)\n  mi_addnode(x1, y)\nend\n\n\n\n\n\nfunction build_circle_block(x, y, h, material, circuit, direction, group, turns)\n  local y1 = y + h\n\n  mi_addnode(x, y)\n  mi_addnode(x, y1)\n\n  mi_addarc(x, y, x, y1, 180, 1)\n  mi_addarc(x, y1, x, y, 180, 1)\n\n  local labelX = x\n  local labelY = y + h/2\n\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\nend\n\nfunction build_square_block(x, y, w, h, material, circuit, direction, group, turns, label_position)\n  local x1 = x + w\n  local y1 = y + h\n\n  mi_addnode(x, y)\n  mi_addnode(x1, y)\n  mi_addnode(x, y1)\n  mi_addnode(x1, y1)\n\n  mi_addsegment(x, y, x1, y)\n  mi_addsegment(x1, y, x1, y1)\n  mi_addsegment(x, y1, x1, y1)\n  mi_addsegment(x, y1, x, y)\n\n  local labelX = x + w/2\n  local labelY = y + h/2\n  if (label_position == "corner") then\n    labelX = x + w/8\n    labelY = y + h/8\n  end\n\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\nend\n\nfunction add_block_props(labelX, labelY, material, circuit, direction, group, turns)\n  mi_addblocklabel(labelX, labelY)\n  mi_selectlabel(labelX, labelY)\n  mi_setblockprop(material, 1, 0, circuit, direction, group, turns)\n  mi_clearselected()\nend\n\n\n\nfunction analyze()\n  mi_saveas(get_full_filepath())\n  mi_analyze()\n  mi_loadsolution()\n  mo_showdensityplot(1, 0, 1, 0, "bmag")\nend\n\ninit()\n'}function y(){var e=["MAGNET_GRADE","HALBACH_GRADE","BACK_IRON_MATERIAL","CONDUCTOR_MATERIAL","FILEPATH","FILENAME"],n={UNITS:"millimeters",NUM_ROTOR_POLE_PAIRS:3,MAGNET_GAP:1,MAGNET_LENGTH:1,MAGNET_WIDTH:1,MAGNET_HEIGHT:1,MAGNET_GRADE:"N50",HALBACH:0,HALBACH_WIDTH:1,HALBACH_HEIGHT:1,HALBACH_GRADE:"N50",BACK_IRON:0,BACK_IRON_HEIGHT:1,BACK_IRON_MATERIAL:"1006 Steel",AIR_GAP:10,STATOR:1,RECTANGLE_CONDUCTOR:0,CONDUCTOR_WIDTH:1,CONDUCTOR_HEIGHT:1,CONDUCTOR_DIAMETER:2,CONDUCTOR_MATERIAL:"32 AWG",PEAK_CURRENT:10,ROTOR_TO_STATOR_GAP:1,NUM_PHASES:3,NUM_PHASE_TURNS:4,ANALYSIS:0,FILEPATH:"",FILENAME:""},t=i.a.useState(n),a=Object(_.a)(t,2),l=a[0],c=a[1],r=i.a.useState(n.HALBACH),o=Object(_.a)(r,2),E=o[0],N=o[1],R=i.a.useState(n.BACK_IRON),y=Object(_.a)(R,2),L=y[0],v=y[1],S=i.a.useState(n.RECTANGLE_CONDUCTOR),D=Object(_.a)(S,2),U=D[0],P=D[1],B=i.a.useState(n.ANALYSIS),w=Object(_.a)(B,2),W=w[0],k=w[1],F=i.a.useState(M(n)),K=Object(_.a)(F,2),Y=K[0],X=K[1];function z(e){return e.map((function(e,n){return Object(I.jsx)(d.a,{value:e,children:e},n)}))}var J=function(){return Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.CONDUCTOR_WIDTH,name:"CONDUCTOR_WIDTH",label:"conductor Width"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.CONDUCTOR_HEIGHT,name:"CONDUCTOR_HEIGHT",label:"conductor Height"})})})]})},q=function(){return Object(I.jsx)(I.Fragment,{children:Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.CONDUCTOR_DIAMETER,name:"CONDUCTOR_DIAMETER",label:"Conductor Diameter"})})})})};function $(e){var n=e.target.checked?1:0;l.RECTANGLE_CONDUCTOR=n,c(Object(s.a)({},l)),P(n),X(M(l))}function Q(n){var t=n.target.value,a=e.includes(n.target.name),i=t.match(/^[0-9]+$|^[0-9]+\.[0-9]*$/);if(a&&(l[n.target.name]=t,c(Object(s.a)({},l)),X(M(l))),i){var r=parseFloat(t);t.match(/\.$/)&&(r=t),l[n.target.name]=r,c(Object(s.a)({},l)),X(M(l))}}var V=z(["N30","N33","N35","N38","N40","N42","N45","N48","N50","N52","N55"]),Z=z(["1006 Steel","1010 Steel","1018 Steel","1020 Steel","1117 Steel"]),ee=z(["10 AWG","12 AWG","14 AWG","16 AWG","18 AWG","20 AWG","22 AWG","24 AWG","26 AWG","28 AWG","30 AWG","32 AWG","34 AWG","36 AWG"]),ne=Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.HALBACH_WIDTH,name:"HALBACH_WIDTH",label:"Halbach Width"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.HALBACH_HEIGHT,name:"HALBACH_HEIGHT",label:"Halbach Height"})})}),Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsxs)(b.a,{fullWidth:!0,children:[Object(I.jsx)(O.a,{children:"Halbach Grade"}),Object(I.jsx)(A.a,{onChange:Q,name:"HALBACH_GRADE",value:l.HALBACH_GRADE,children:V})]})})]}),te=Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.BACK_IRON_HEIGHT,name:"BACK_IRON_HEIGHT",label:"Back Iron Height"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsxs)(b.a,{fullWidth:!0,children:["Iron Material",Object(I.jsx)(A.a,{onChange:Q,name:"BACK_IRON_MATERIAL",value:l.BACK_IRON_MATERIAL,children:Z})]})})]}),ae=function(){var e=J(),n=q();return Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(g.a,{children:"Currently this will only simulate 3 phase designs wiith overlapped windings."})}),Object(I.jsxs)(h.a,{item:!0,xs:12,children:[Object(I.jsx)(x.a,{component:"legend",children:"Rectangle conductor?"}),Object(I.jsx)(u.a,{control:Object(I.jsx)(f.a,{value:l.RECTANGLE_CONDUCTOR,onChange:$,name:"STATOR"}),label:U?"Yes":"No"})]}),U?e:n,Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsxs)(b.a,{fullWidth:!0,children:["Conductor Material",Object(I.jsx)(A.a,{onChange:Q,name:"CONDUCTOR_MATERIAL",value:l.CONDUCTOR_MATERIAL,children:ee})]})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.NUM_PHASE_TURNS,name:"NUM_PHASE_TURNS",label:"# of Turns per Phase"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.ROTOR_TO_STATOR_GAP,name:"ROTOR_TO_STATOR_GAP",label:"Rotor to Stator Air Gap"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.PEAK_CURRENT,name:"PEAK_CURRENT",label:"Peak Current"})})})]})}(),ie=Object(I.jsxs)(I.Fragment,{children:[Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.FILEPATH,name:"FILEPATH",label:"File Path",helperText:"Must have a trailing slash. If using windows this must begin with a drive letter and contain trailing backslashe. for example (C:\\path\\to\\save\\)"})})}),Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.FILENAME,name:"FILENAME",label:"File Name",helperText:"This must end in '.fem'"})})})]});return Object(I.jsxs)(I.Fragment,{children:[Object(I.jsxs)(h.a,{container:!0,spacing:2,children:[Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(g.a,{variant:"h2",children:"Motor Sim Generator"})}),Object(I.jsxs)(h.a,{item:!0,xs:12,children:[Object(I.jsx)(g.a,{children:"This form will generate a LUA script that can then be run in FEMM to produce a 2D simulation of a 3 phase air-cored toroidially wound axial flux permanant magnet motor."}),Object(I.jsx)(g.a,{children:"This is still a work in progress and will hopefully support other motor architechtures in the future."})]})]}),Object(I.jsxs)(h.a,{container:!0,spacing:2,children:[Object(I.jsx)(h.a,{item:!0,xs:12,lg:4,children:Object(I.jsx)(m.a,{children:Object(I.jsx)(T.a,{children:Object(I.jsxs)(h.a,{container:!0,spacing:4,children:[Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(g.a,{variant:"h2",children:"General"})}),Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsxs)(b.a,{component:"fieldset",children:[Object(I.jsx)(x.a,{component:"legend",children:"Units"}),Object(I.jsxs)(p.a,{row:!0,"aria-label":"units",onChange:Q,name:"UNITS",value:l.UNITS,children:[Object(I.jsx)(u.a,{value:"millimeters",control:Object(I.jsx)(C.a,{}),label:"Millimeters"}),Object(I.jsx)(u.a,{value:"inches",control:Object(I.jsx)(C.a,{}),label:"Inches"})]})]})}),Object(I.jsxs)(h.a,{item:!0,xs:12,children:[Object(I.jsx)(x.a,{component:"legend",children:"Auto run analysis?"}),Object(I.jsx)(u.a,{control:Object(I.jsx)(f.a,{value:l.ANALYSIS,onChange:function(e){var n=e.target.checked?1:0;l.ANALYSIS=n,c(Object(s.a)({},l)),k(n),X(M(l))},name:"ANALYSIS"}),label:W?"Yes":"No"})]}),W?ie:null]})})})}),Object(I.jsx)(h.a,{item:!0,xs:12,lg:4,children:Object(I.jsx)(m.a,{children:Object(I.jsx)(T.a,{children:Object(I.jsxs)(h.a,{container:!0,spacing:4,children:[Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(g.a,{variant:"h2",children:"Rotor"})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.AIR_GAP,name:"AIR_GAP",label:"Air Gap"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.MAGNET_GAP,name:"MAGNET_GAP",label:"Magnet Spacing"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.NUM_ROTOR_POLE_PAIRS,name:"NUM_ROTOR_POLE_PAIRS",label:"# of Pole Pairs"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.MAGNET_LENGTH,name:"MAGNET_LENGTH",label:"Magnet Length"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.MAGNET_WIDTH,name:"MAGNET_WIDTH",label:"Magnet Width"})})}),Object(I.jsx)(h.a,{item:!0,xs:6,children:Object(I.jsx)(u.a,{filled:"true",control:Object(I.jsx)(j.a,{onChange:Q,value:l.MAGNET_HEIGHT,name:"MAGNET_HEIGHT",label:"Magnet Height"})})}),Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsxs)(b.a,{fullWidth:!0,children:[Object(I.jsx)(O.a,{children:"Magnet Grade"}),Object(I.jsx)(A.a,{onChange:Q,name:"MAGNET_GRADE",value:l.MAGNET_GRADE,children:V})]})}),Object(I.jsxs)(h.a,{item:!0,xs:12,children:[Object(I.jsx)(x.a,{component:"legend",children:"Halbach?"}),Object(I.jsx)(u.a,{control:Object(I.jsx)(f.a,{value:l.HALBACH,onChange:function(e){var n=e.target.checked?1:0;l.HALBACH=n,c(Object(s.a)({},l)),N(n),X(M(l))},name:"HALBACH"}),label:E?"Yes":"No"})]}),E?ne:null,Object(I.jsxs)(h.a,{item:!0,xs:12,children:[Object(I.jsx)(x.a,{component:"legend",children:"Back Iron?"}),Object(I.jsx)(u.a,{control:Object(I.jsx)(f.a,{value:l.BACK_IRON,onChange:function(e){var n=e.target.checked?1:0;l.BACK_IRON=n,c(Object(s.a)({},l)),v(n),X(M(l))},name:"BACK_IRON"}),label:L?"Yes":"No"})]}),L?te:null]})})})}),Object(I.jsx)(h.a,{item:!0,xs:12,lg:4,children:Object(I.jsx)(m.a,{children:Object(I.jsx)(T.a,{children:Object(I.jsxs)(h.a,{container:!0,spacing:4,children:[Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(g.a,{variant:"h2",children:"Stator"})}),ae]})})})})]}),Object(I.jsxs)(h.a,{container:!0,spacing:3,children:[Object(I.jsxs)(h.a,{item:!0,xs:12,children:[Object(I.jsx)("h2",{children:"Output:"}),Object(I.jsx)(g.a,{children:"Copy this LUA script and paste it in the LUA console in your FEMM program."})]}),Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(j.a,{fullWidth:!0,multiline:!0,rows:20,rowsMax:20,value:Y})}),Object(I.jsx)(h.a,{item:!0,xs:12,children:Object(I.jsx)(G,{children:function(e){var n=e.copy;return Object(I.jsx)(H.a,{variant:"contained",color:"primary",onClick:function(){return n(Y)},children:"Copy"})}})})]})]})}var L=t(65),v=t.n(L),S=t(66),D=t.n(S),U=t(64),P=t(99);function B(){return Object(I.jsxs)(h.a,{container:!0,style:{marginTop:40},justify:"flex-end",children:[Object(I.jsx)(h.a,{item:!0,xs:8,children:Object(I.jsxs)(g.a,{children:["Version: ",U.version]})}),Object(I.jsx)(h.a,{item:!0,xs:1,children:Object(I.jsx)(P.a,{target:"_blank",variant:"contained",color:"primary",href:"https://www.youtube.com/channel/UCQk0CkSexTb7GQvpGxj4kxw",children:Object(I.jsx)(v.a,{})})}),Object(I.jsx)(h.a,{item:!0,xs:1,children:Object(I.jsx)(P.a,{target:"_blank",variant:"contained",color:"primary",href:"https://github.com/CJohnson25/femm-sim-gen-app/",children:Object(I.jsx)(D.a,{})})})]})}var w=function(){return Object(I.jsxs)("div",{className:"App",children:[Object(I.jsx)(r.a,{maxWidth:"md",children:Object(I.jsx)(y,{})}),Object(I.jsx)(o.a,{style:{marginTop:40}}),Object(I.jsx)(B,{})]})},W=function(e){e&&e instanceof Function&&t.e(3).then(t.bind(null,152)).then((function(n){var t=n.getCLS,a=n.getFID,i=n.getFCP,l=n.getLCP,c=n.getTTFB;t(e),a(e),i(e),l(e),c(e)}))};c.a.render(Object(I.jsx)(i.a.StrictMode,{children:Object(I.jsx)(w,{})}),document.getElementById("root")),W()}},[[94,1,2]]]);
//# sourceMappingURL=main.2b879d92.chunk.js.map