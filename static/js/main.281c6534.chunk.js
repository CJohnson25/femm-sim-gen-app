(this["webpackJsonpfemm-sim-gen-app"]=this["webpackJsonpfemm-sim-gen-app"]||[]).push([[0],{64:function(n){n.exports=JSON.parse('{"name":"femm-sim-gen-app","homepage":"http://CJohnson25.github.io/femm-sim-gen-app","version":"0.8.0","private":true,"dependencies":{"@material-ui/core":"^4.11.3","@material-ui/icons":"^4.11.2","@testing-library/jest-dom":"^5.12.0","@testing-library/react":"^11.2.6","@testing-library/user-event":"^12.8.3","clipboard-copy":"^4.0.1","fontsource-roboto":"^4.0.0","react":"^17.0.2","react-dom":"^17.0.2","react-scripts":"4.0.3","web-vitals":"^1.1.1"},"scripts":{"predeploy":"npm run build","deploy":"gh-pages -d build","start":"react-scripts start","build":"react-scripts build","test":"react-scripts test","eject":"react-scripts eject"},"eslintConfig":{"extends":["react-app","react-app/jest"]},"browserslist":{"production":[">0.2%","not dead","not op_mini all"],"development":["last 1 chrome version","last 1 firefox version","last 1 safari version"]},"devDependencies":{"gh-pages":"^3.1.0"}}')},82:function(n,e,t){},83:function(n,e,t){},94:function(n,e,t){"use strict";t.r(e);var a=t(0),i=t.n(a),l=t(10),c=t.n(l),r=(t(82),t(83),t(84),t(142)),o=t(143),s=t(38),_=t(26),d=t(148),h=t(132),u=t(133),b=t(149),j=t(136),g=t(137),A=t(144),m=t(96),O=t(138),x=t(139),f=t(97),p=t(151),H=t(145),T=t(140),C=t(141),N=t(57),E=t.n(N),G=t(147),R=t(2);function I(n){var e=n.children,t=i.a.useState(!1),a=Object(_.a)(t,2),l=a[0],c=a[1];return Object(R.jsx)(G.a,{open:l,title:"Copied to clipboard!",leaveDelay:1500,onClose:function(){c(!1)},children:e({copy:function(n){E()(n),c(!0)}})})}function y(n){return JSON.stringify(n,null,2).replace(/^{\n?|\n?}$/g,"").replace(/"(.*)": /g,"$1 = ").replace(/,\n/g,"\n")+'\nfunction init () \n  -- Create Doc\n  newdocument(0)\n  -- Init Problem\n  mi_probdef(0, UNITS, "planar", 1e-008, get_tallest_magnet_height() * 2 + AIR_GAP)\n  -- Init Grid\n  mi_showgrid()\n  mi_setgrid(0.001, "cart")\n\n  init_materials()\n  init_circuits() \n  build_objects()\n\n  mi_zoomnatural()\nend\n\nfunction init_materials()\n  mi_getmaterial("Air")\n  mi_getmaterial(IRON_MATERIAL)\n  mi_getmaterial(MAGNET_GRADE)\n  if HALBACH == 1 then\n    mi_getmaterial(HALBACH_GRADE)\n  end\n\n  mi_getmaterial(CONDUCTOR_MATERIAL)\nend\n\nfunction init_circuits() \n  for i = 1, NUM_PHASES do\n    local phase_label = get_phase_label(i)\n    local current = get_phase_current(i)\n    local circuit_type = 1 -- 1 for series 0 for parallel\n    mi_addcircprop(phase_label, current, circuit_type)\n  end\nend\n\n\n\nfunction get_v_gap () \n  return get_total_height() * 2\nend\n\nfunction get_h_gap ()\n  return get_total_width() * 1\nend\n\nfunction get_bound_height()\n  return get_v_gap() * 3\nend\n\nfunction get_bound_width() \n  return get_h_gap() * 3\nend\n\nfunction get_pole_width ()\n  local pole_width = MAGNET_WIDTH + MAGNET_GAP\n  if HALBACH == 1 then\n    return pole_width + HALBACH_WIDTH + MAGNET_GAP\n  end\n\n  return pole_width\nend\n\nfunction is_halbach_taller() \n  if HALBACH == 1 then\n    if MAGNET_HEIGHT < HALBACH_HEIGHT then\n      return 1\n    end\n  end\n\n  return 0\nend\n\nfunction get_tallest_magnet_height() \n  if is_halbach_taller() == 1 then\n    return HALBACH_HEIGHT\n  end\n\n  return MAGNET_HEIGHT\nend\n\nfunction get_magnet_height_diff() \n  if HALBACH == 1 then\n    return abs(MAGNET_HEIGHT - HALBACH_HEIGHT)\n  end\n\n  return 0\nend\n\nfunction get_total_width ()\n  local width = (get_nonhalbach_count() - 1) * (MAGNET_WIDTH + MAGNET_GAP)\n\n  if HALBACH == 1 then\n    return width + get_halbach_count() * (HALBACH_WIDTH + MAGNET_GAP)\n  end\n\n  return width\nend\n\nfunction get_total_height ()\n  local total_height = get_tallest_magnet_height() * 2 + AIR_GAP\n  if BACK_IRON == 1 then\n    return total_height + BACK_IRON_HEIGHT * 2\n  end\n\n  return total_height\nend\n\nfunction get_halbach_count() \n  return POLE_COUNT\nend\n\nfunction get_nonhalbach_count() \n  return POLE_COUNT + 1 \nend\n\nfunction get_total_magnet_count ()\n  local count = get_nonhalbach_count()\n\n  if HALBACH == 1 then\n    return count + get_halbach_count()\n  end\n\n  return count\nend\n\nfunction get_phase_offset(phase)\n  return mod(phase, NUM_PHASES)\nend\n\nfunction get_phase_current(phase)\n  local angle = 360 / NUM_PHASES\n  return PEAK_CURRENT * sin(rad((phase - 1) * angle))\nend\n\nfunction get_phase_label(phase) \n  return "Phase " .. tostring(phase)\nend\n\n-- TODO make this use a look up table for diameters based on gague selected\nfunction get_coil_diameter()\n  return CONDUCTOR_DIAMETER\nend\n\nfunction get_coil_gap()\n  return get_pole_width() / NUM_PHASES\nend\n\nfunction get_coil_offset(coil_num, phase)\n  local phase_offset = get_phase_offset(phase)\n  return (coil_num * NUM_PHASES - phase_offset) * get_coil_gap() + get_pole_width() / 2\nend\n\nfunction get_total_coils() \n  return NUM_PHASES * NUM_PHASE_COILS\nend\n\nfunction get_total_legs() \n  return get_total_coils() * 2\nend\n\n\n\n\nfunction build_objects ()\n  build_air_bounds()\n  -- Build the sides separately\n  build_rotor(0)\n  build_rotor(1)\n  \n  if CONDUCTOR == 1 then\n    build_coil_phases()\n  end\n\n  build_analysis_nodes()\nend\n\nfunction build_air_bounds()\n  build_square_block(0, 0, get_bound_width() , get_bound_height(), "Air", "", 0, 0, 0, "corner")\nend\n\nfunction build_rotor(side) \n  build_rotor_magnets(side)\n  if BACK_IRON == 1 then\n    local x = get_h_gap()\n    local y = get_v_gap() - BACK_IRON_HEIGHT\n    if side == 1 then \n      y = get_v_gap() + AIR_GAP + get_tallest_magnet_height() * 2\n    end\n    build_rotor_iron(x, y)\n  end\nend\n\nfunction build_rotor_magnets (side)\n  local count = get_total_magnet_count()\n  \n  local modulus = 2\n  if HALBACH == 1 then \n    modulus = 4\n  end\n  \n  -- init horizontal offset at h gap\n  local current_x_offset = get_h_gap()\n  -- init horizontal offset at v gap. Add gap for the other side\n  local y_offset = get_v_gap()\n\n  local offset = 90\n  if HALBACH == 1 then\n    offset = 0\n  end\n\n  for i = 0, count - 1 do\n    local direction = (360/modulus) * (mod(i, modulus) + 1) + offset\n    if side == 1 then\n      direction =  (360/modulus) * (modulus - mod(i, modulus) + 1) + offset\n    end\n\n    local is_halbach = 0\n    local is_end = 0\n    local width = MAGNET_WIDTH\n    local current_y_offset = y_offset\n    if side == 1 then\n      current_y_offset = current_y_offset + AIR_GAP + get_tallest_magnet_height()\n    end\n    local height_diff = get_magnet_height_diff()\n\n    -- If iterating Halbach and If current iteration is halbach magnet\n    if HALBACH == 1 and mod(i, 2) == 1 then\n      is_halbach = 1\n      width = HALBACH_WIDTH\n      if side == 1 then\n        if is_halbach_taller() == 0 then\n          current_y_offset = current_y_offset + height_diff\n        end\n      end\n    else\n      if side == 1 then\n        if is_halbach_taller() == 1 then\n          current_y_offset = current_y_offset + height_diff\n        end\n      end\n    end\n\n    -- First or last iteration are half magnets\n    if i == 0 or i == count - 1 then\n      is_end = 1\n      width = width/2\n    end\n\n    build_magnet(current_x_offset, current_y_offset, direction, is_halbach, is_end)\n    current_x_offset = current_x_offset + width + MAGNET_GAP\n  end\nend\n\nfunction build_magnet (x, y, direction, is_halbach, is_end)\n  local w = MAGNET_WIDTH\n  local h = MAGNET_HEIGHT\n  local grade = MAGNET_GRADE\n\n  if is_halbach == 1 then\n    w = HALBACH_WIDTH\n    h = HALBACH_HEIGHT\n    grade = HALBACH_GRADE\n  end \n\n  if is_end == 1 then\n    w = w/2\n  end\n\n  build_square_block(x, y, w, h, grade, "", direction, 0, 0, "center")\nend\n\nfunction build_rotor_iron (x, y)\n  build_square_block(x, y, get_total_width(), BACK_IRON_HEIGHT, IRON_MATERIAL, "", 0, 0, 0, "center")\nend\n\nfunction build_coil_phases()\n  local starting_side = 0\n  for i = 0, NUM_PHASES - 1 do\n    build_coil_phase(i, starting_side)\n    starting_side = starting_side + 1\n  end\nend\n\nfunction build_coil_phase(phase, starting_side)\n  for i = 0, (NUM_PHASE_COILS * 2) - 1 do\n    build_coil_leg(i, phase, starting_side)\n    starting_side = starting_side + 1\n  end\nend\n\nfunction build_coil_leg(coil_num, phase, starting_side) \n  local h = get_coil_diameter()\n  -- local x = get_coil_offset(coil_num, phase) + get_h_gap()\n  local x = get_coil_offset(coil_num, phase) + get_h_gap() + get_coil_gap() * 3\n  local y = get_v_gap() + get_tallest_magnet_height() + AIR_GAP - ROTOR_TO_STATOR_GAP - get_coil_diameter()\n  local turns = NUM_TURNS\n  if mod(starting_side, 2) == 1 then\n    y = get_v_gap() + get_tallest_magnet_height() + ROTOR_TO_STATOR_GAP\n    turns = turns * -1\n  end\n\n  local circuit = get_phase_label(phase + 1)\n  build_circle_block(x, y, h, CONDUCTOR_MATERIAL, circuit, 0, 0, turns)\nend\n\nfunction build_analysis_nodes () \n  local x = get_h_gap()\n  local x1 = x + get_total_width()\n  local y = get_v_gap() + AIR_GAP/2 + MAGNET_HEIGHT\n  \n  mi_addnode(x, y)\n  mi_addnode(x1, y)\nend\n\n\n\n\n\nfunction build_circle_block(x, y, h, material, circuit, direction, group, turns)\n  local y1 = y + h\n\n  mi_addnode(x, y)\n  mi_addnode(x, y1)\n\n  mi_addarc(x, y, x, y1, 180, 1)\n  mi_addarc(x, y1, x, y, 180, 1)\n\n  local labelX = x\n  local labelY = y + h/2\n\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\nend\n\nfunction build_square_block(x, y, w, h, material, circuit, direction, group, turns, label_position)\n  local x1 = x + w\n  local y1 = y + h\n\n  mi_addnode(x, y)\n  mi_addnode(x1, y)\n  mi_addnode(x, y1)\n  mi_addnode(x1, y1)\n\n  mi_addsegment(x, y, x1, y)\n  mi_addsegment(x1, y, x1, y1)\n  mi_addsegment(x, y1, x1, y1)\n  mi_addsegment(x, y1, x, y)\n\n  local labelX = x + w/2\n  local labelY = y + h/2\n  if (label_position == "corner") then\n    labelX = x + w/8\n    labelY = y + h/8\n  end\n\n  add_block_props(labelX, labelY, material, circuit, direction, group, turns)\nend\n\nfunction add_block_props(labelX, labelY, material, circuit, direction, group, turns)\n  mi_addblocklabel(labelX, labelY)\n  mi_selectlabel(labelX, labelY)\n  mi_setblockprop(material, 1, 0, circuit, direction, group, turns)\n  mi_clearselected()\nend\n\ninit()\n'}function M(){var n=["MAGNET_GRADE","HALBACH_GRADE","IRON_MATERIAL","CONDUCTOR_MATERIAL"],e={UNITS:"millimeters",MAGNET_WIDTH:1,MAGNET_HEIGHT:1,MAGNET_GRADE:"N50",HALBACH:0,HALBACH_WIDTH:1,HALBACH_HEIGHT:1,HALBACH_GRADE:"N50",BACK_IRON:0,BACK_IRON_HEIGHT:1,IRON_MATERIAL:"1006 Steel",POLE_COUNT:6,AIR_GAP:10,MAGNET_GAP:1,CONDUCTOR:1,CONDUCTOR_DIAMETER:2,CONDUCTOR_MATERIAL:"32 AWG",NUM_PHASE_COILS:2,NUM_PHASES:3,NUM_TURNS:4,ROTOR_TO_STATOR_GAP:1,PEAK_CURRENT:10},t=i.a.useState(e),a=Object(_.a)(t,2),l=a[0],c=a[1],r=i.a.useState(e.HALBACH),o=Object(_.a)(r,2),N=o[0],E=o[1],G=i.a.useState(e.BACK_IRON),M=Object(_.a)(G,2),v=M[0],L=M[1],S=i.a.useState(e.CONDUCTOR),B=Object(_.a)(S,2),D=(B[0],B[1],i.a.useState(y(e))),w=Object(_.a)(D,2),U=w[0],P=w[1];function W(n){return n.map((function(n,e){return Object(R.jsx)(d.a,{value:n,children:n},e)}))}function k(e){var t=e.target.value,a=n.includes(e.target.name),i=t.match(/^[0-9]+$|^[0-9]+\.[0-9]*$/);if(a&&(l[e.target.name]=t,c(Object(s.a)({},l)),P(y(l))),i){var r=parseFloat(t);t.match(/\.$/)&&(r=t),l[e.target.name]=r,c(Object(s.a)({},l)),P(y(l))}}var K=W(["N30","N33","N35","N38","N40","N42","N45","N48","N50","N52","N55"]),F=W(["1006 Steel","1010 Steel","1018 Steel","1020 Steel","1117 Steel"]),Y=W(["10 AWG","12 AWG","14 AWG","16 AWG","18 AWG","20 AWG","22 AWG","24 AWG","26 AWG","28 AWG","30 AWG","32 AWG","34 AWG","36 AWG"]),X=Object(R.jsxs)(R.Fragment,{children:[Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.HALBACH_WIDTH,name:"HALBACH_WIDTH",label:"Halbach Width"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.HALBACH_HEIGHT,name:"HALBACH_HEIGHT",label:"Halbach Height"})})}),Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsxs)(j.a,{fullWidth:!0,children:[Object(R.jsx)(g.a,{children:"Halbach Grade"}),Object(R.jsx)(A.a,{onChange:k,name:"HALBACH_GRADE",value:l.HALBACH_GRADE,children:K})]})})]}),J=Object(R.jsxs)(R.Fragment,{children:[Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.BACK_IRON_HEIGHT,name:"BACK_IRON_HEIGHT",label:"Back Iron Height"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsxs)(j.a,{fullWidth:!0,children:["Iron Material",Object(R.jsx)(A.a,{onChange:k,name:"IRON_MATERIAL",value:l.IRON_MATERIAL,children:F})]})})]}),$=Object(R.jsxs)(R.Fragment,{children:[Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsx)(m.a,{children:"Currently this will only simulate 3 phase designs wiith overlapped windings."})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.CONDUCTOR_DIAMETER,name:"CONDUCTOR_DIAMETER",label:"Conductor Diameter"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsxs)(j.a,{fullWidth:!0,children:["Conductor Material",Object(R.jsx)(A.a,{onChange:k,name:"CONDUCTOR_MATERIAL",value:l.CONDUCTOR_MATERIAL,children:Y})]})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.NUM_TURNS,name:"NUM_TURNS",label:"# of Turns per Phase"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.ROTOR_TO_STATOR_GAP,name:"ROTOR_TO_STATOR_GAP",label:"Rotor to Stator Air Gap"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.PEAK_CURRENT,name:"PEAK_CURRENT",label:"Peak Current"})})})]});return Object(R.jsxs)(R.Fragment,{children:[Object(R.jsxs)(h.a,{container:!0,spacing:2,children:[Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsx)(m.a,{variant:"h2",children:"Motor Sim Generator"})}),Object(R.jsxs)(h.a,{item:!0,xs:12,children:[Object(R.jsx)(m.a,{children:"This form will generate a LUA script that can then be run in FEMM to produce a 2D simulation of a 3 phase air-cored toroidially wound axial flux permanant magnet motor."}),Object(R.jsx)(m.a,{children:"This is still a work in progress and will hopefully support other motor architechtures in the future."})]})]}),Object(R.jsxs)(h.a,{container:!0,spacing:2,children:[Object(R.jsx)(h.a,{item:!0,xs:12,md:6,children:Object(R.jsx)(O.a,{children:Object(R.jsx)(x.a,{children:Object(R.jsxs)(h.a,{container:!0,spacing:4,children:[Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsx)(m.a,{variant:"h2",children:"Rotor"})}),Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsxs)(j.a,{component:"fieldset",children:[Object(R.jsx)(f.a,{component:"legend",children:"Units"}),Object(R.jsxs)(p.a,{row:!0,"aria-label":"units",onChange:k,name:"UNITS",value:l.UNITS,children:[Object(R.jsx)(u.a,{value:"millimeters",control:Object(R.jsx)(H.a,{}),label:"Millimeters"}),Object(R.jsx)(u.a,{value:"inches",control:Object(R.jsx)(H.a,{}),label:"Inches"})]})]})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.AIR_GAP,name:"AIR_GAP",label:"Air Gap"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.MAGNET_GAP,name:"MAGNET_GAP",label:"Magnet Spacing"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.MAGNET_WIDTH,name:"MAGNET_WIDTH",label:"Magnet Width"})})}),Object(R.jsx)(h.a,{item:!0,xs:6,children:Object(R.jsx)(u.a,{filled:"true",control:Object(R.jsx)(b.a,{onChange:k,value:l.MAGNET_HEIGHT,name:"MAGNET_HEIGHT",label:"Magnet Height"})})}),Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsxs)(j.a,{fullWidth:!0,children:[Object(R.jsx)(g.a,{children:"Magnet Grade"}),Object(R.jsx)(A.a,{onChange:k,name:"MAGNET_GRADE",value:l.MAGNET_GRADE,children:K})]})}),Object(R.jsxs)(h.a,{item:!0,xs:12,children:[Object(R.jsx)(f.a,{component:"legend",children:"Halbach?"}),Object(R.jsx)(u.a,{control:Object(R.jsx)(T.a,{value:l.HALBACH,onChange:function(n){var e=n.target.checked?1:0;l.HALBACH=e,c(Object(s.a)({},l)),E(e),P(y(l))},name:"HALBACH"}),label:N?"Yes":"No"})]}),N?X:null,Object(R.jsxs)(h.a,{item:!0,xs:12,children:[Object(R.jsx)(f.a,{component:"legend",children:"Back Iron?"}),Object(R.jsx)(u.a,{control:Object(R.jsx)(T.a,{value:l.BACK_IRON,onChange:function(n){var e=n.target.checked?1:0;l.BACK_IRON=e,c(Object(s.a)({},l)),L(e),P(y(l))},name:"BACK_IRON"}),label:v?"Yes":"No"})]}),v?J:null]})})})}),Object(R.jsx)(h.a,{item:!0,xs:12,md:6,children:Object(R.jsx)(O.a,{children:Object(R.jsx)(x.a,{children:Object(R.jsxs)(h.a,{container:!0,spacing:4,children:[Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsx)(m.a,{variant:"h2",children:"Stator"})}),$]})})})})]}),Object(R.jsxs)(h.a,{container:!0,spacing:3,children:[Object(R.jsxs)(h.a,{item:!0,xs:12,children:[Object(R.jsx)("h2",{children:"Output:"}),Object(R.jsx)(m.a,{children:"Copy this LUA script and paste it in the LUA console in your FEMM program."})]}),Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsx)(b.a,{fullWidth:!0,multiline:!0,rows:20,rowsMax:20,value:U})}),Object(R.jsx)(h.a,{item:!0,xs:12,children:Object(R.jsx)(I,{children:function(n){var e=n.copy;return Object(R.jsx)(C.a,{variant:"contained",color:"primary",onClick:function(){return e(U)},children:"Copy"})}})})]})]})}var v=t(65),L=t.n(v),S=t(66),B=t.n(S),D=t(64),w=t(99);function U(){return Object(R.jsxs)(h.a,{container:!0,style:{marginTop:40},justify:"flex-end",children:[Object(R.jsx)(h.a,{item:!0,xs:8,children:Object(R.jsxs)(m.a,{children:["Version: ",D.version]})}),Object(R.jsx)(h.a,{item:!0,xs:1,children:Object(R.jsx)(w.a,{target:"_blank",variant:"contained",color:"primary",href:"https://www.youtube.com/channel/UCQk0CkSexTb7GQvpGxj4kxw",children:Object(R.jsx)(L.a,{})})}),Object(R.jsx)(h.a,{item:!0,xs:1,children:Object(R.jsx)(w.a,{target:"_blank",variant:"contained",color:"primary",href:"https://github.com/CJohnson25/femm-sim-gen-app/",children:Object(R.jsx)(B.a,{})})})]})}var P=function(){return Object(R.jsxs)("div",{className:"App",children:[Object(R.jsx)(r.a,{maxWidth:"md",children:Object(R.jsx)(M,{})}),Object(R.jsx)(o.a,{style:{marginTop:40}}),Object(R.jsx)(U,{})]})},W=function(n){n&&n instanceof Function&&t.e(3).then(t.bind(null,152)).then((function(e){var t=e.getCLS,a=e.getFID,i=e.getFCP,l=e.getLCP,c=e.getTTFB;t(n),a(n),i(n),l(n),c(n)}))};c.a.render(Object(R.jsx)(i.a.StrictMode,{children:Object(R.jsx)(P,{})}),document.getElementById("root")),W()}},[[94,1,2]]]);
//# sourceMappingURL=main.281c6534.chunk.js.map